
atv05_3717_251.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000412  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000412  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f97  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000803  00000000  00000000  0000152b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000601  00000000  00000000  00001d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e0  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000060e  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002f66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  8e:	0c 94 07 02 	jmp	0x40e	; 0x40e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <spi_init>:
#define DIN PB3     // SPI MOSI
#define CS  PB2     // Chip select
#define CLK PB5     // SPI Clock

void spi_init() {
    DATA_PORT_DDR |= (1 << DIN) | (1 << CS) | (1 << CLK);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8c 62       	ori	r24, 0x2C	; 44
  9a:	84 b9       	out	0x04, r24	; 4
    SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
  9c:	8c b5       	in	r24, 0x2c	; 44
  9e:	81 65       	ori	r24, 0x51	; 81
  a0:	8c bd       	out	0x2c, r24	; 44
    DATA_PORT_PORT |= (1 << CS);
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	08 95       	ret

000000aa <spi_transmit>:
}

void spi_transmit(uint8_t data) {
    SPDR = data;
  aa:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
  ac:	0d b4       	in	r0, 0x2d	; 45
  ae:	07 fe       	sbrs	r0, 7
  b0:	fd cf       	rjmp	.-6      	; 0xac <spi_transmit+0x2>
}
  b2:	08 95       	ret

000000b4 <max7219_send>:

void max7219_send(uint8_t addr, uint8_t data) {
  b4:	cf 93       	push	r28
  b6:	c6 2f       	mov	r28, r22
    DATA_PORT_PORT &= ~(1 << CS);
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	9b 7f       	andi	r25, 0xFB	; 251
  bc:	95 b9       	out	0x05, r25	; 5
    spi_transmit(addr);
  be:	0e 94 55 00 	call	0xaa	; 0xaa <spi_transmit>
    spi_transmit(data);
  c2:	8c 2f       	mov	r24, r28
  c4:	0e 94 55 00 	call	0xaa	; 0xaa <spi_transmit>
    DATA_PORT_PORT |= (1 << CS);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	85 b9       	out	0x05, r24	; 5
}
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <max7219_init>:

void max7219_init() {
    max7219_send(0x0F, 0x00);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <max7219_send>
    max7219_send(0x09, 0x00);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	89 e0       	ldi	r24, 0x09	; 9
  de:	0e 94 5a 00 	call	0xb4	; 0xb4 <max7219_send>
    max7219_send(0x0A, 0x03);
  e2:	63 e0       	ldi	r22, 0x03	; 3
  e4:	8a e0       	ldi	r24, 0x0A	; 10
  e6:	0e 94 5a 00 	call	0xb4	; 0xb4 <max7219_send>
    max7219_send(0x0B, 0x07);
  ea:	67 e0       	ldi	r22, 0x07	; 7
  ec:	8b e0       	ldi	r24, 0x0B	; 11
  ee:	0e 94 5a 00 	call	0xb4	; 0xb4 <max7219_send>
    max7219_send(0x0C, 0x01);
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	8c e0       	ldi	r24, 0x0C	; 12
  f6:	0e 94 5a 00 	call	0xb4	; 0xb4 <max7219_send>
  fa:	08 95       	ret

000000fc <max7219_clear>:
}

void max7219_clear() {
  fc:	cf 93       	push	r28
    for (uint8_t i = 1; i <= 8; i++) {
  fe:	c1 e0       	ldi	r28, 0x01	; 1
 100:	05 c0       	rjmp	.+10     	; 0x10c <max7219_clear+0x10>
        max7219_send(i, 0x00);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	8c 2f       	mov	r24, r28
 106:	0e 94 5a 00 	call	0xb4	; 0xb4 <max7219_send>
    max7219_send(0x0B, 0x07);
    max7219_send(0x0C, 0x01);
}

void max7219_clear() {
    for (uint8_t i = 1; i <= 8; i++) {
 10a:	cf 5f       	subi	r28, 0xFF	; 255
 10c:	c9 30       	cpi	r28, 0x09	; 9
 10e:	c8 f3       	brcs	.-14     	; 0x102 <max7219_clear+0x6>
        max7219_send(i, 0x00);
    }
}
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <adc_init>:

// --- Funções ADC ---

void adc_init() {
    ADMUX = (1 << REFS0); // AVcc ref
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 11a:	87 e8       	ldi	r24, 0x87	; 135
 11c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    DIDR0 = (1 << ADC4D) | (1 << ADC5D);
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 126:	08 95       	ret

00000128 <adc_read>:
}

uint16_t adc_read(uint8_t channel) {
    ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 128:	ec e7       	ldi	r30, 0x7C	; 124
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	90 7f       	andi	r25, 0xF0	; 240
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	89 2b       	or	r24, r25
 134:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC);
 136:	ea e7       	ldi	r30, 0x7A	; 122
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	80 83       	st	Z, r24
    while (ADCSRA & (1 << ADSC));
 140:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 144:	86 fd       	sbrc	r24, 6
 146:	fc cf       	rjmp	.-8      	; 0x140 <adc_read+0x18>
    return ADCW;
 148:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 14c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 150:	08 95       	ret

00000152 <lcd_pulse_enable>:

// --- Funções LCD ---

void lcd_pulse_enable() {
    LCD_PORT |= (1 << E);
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	88 60       	ori	r24, 0x08	; 8
 156:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_pulse_enable+0x8>
 15e:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1 << E);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	87 7f       	andi	r24, 0xF7	; 247
 164:	8b b9       	out	0x0b, r24	; 11
 166:	8f e8       	ldi	r24, 0x8F	; 143
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_pulse_enable+0x18>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_pulse_enable+0x1e>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <lcd_send_nibble>:
    _delay_us(100);
}

void lcd_send_nibble(uint8_t nibble) {
    LCD_PORT &= 0x0F;
 174:	9b b1       	in	r25, 0x0b	; 11
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	9b b9       	out	0x0b, r25	; 11
    LCD_PORT |= (nibble << 4);
 17a:	2b b1       	in	r18, 0x0b	; 11
 17c:	30 e1       	ldi	r19, 0x10	; 16
 17e:	83 9f       	mul	r24, r19
 180:	c0 01       	movw	r24, r0
 182:	11 24       	eor	r1, r1
 184:	82 2b       	or	r24, r18
 186:	8b b9       	out	0x0b, r24	; 11
    lcd_pulse_enable();
 188:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_pulse_enable>
 18c:	08 95       	ret

0000018e <lcd_send_byte>:
}

void lcd_send_byte(uint8_t data, uint8_t is_data) {
 18e:	cf 93       	push	r28
 190:	c8 2f       	mov	r28, r24
    if (is_data)
 192:	66 23       	and	r22, r22
 194:	21 f0       	breq	.+8      	; 0x19e <lcd_send_byte+0x10>
        LCD_PORT |= (1 << RS);
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	8b b9       	out	0x0b, r24	; 11
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <lcd_send_byte+0x16>
    else
        LCD_PORT &= ~(1 << RS);
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	8b b9       	out	0x0b, r24	; 11
    lcd_send_nibble(data >> 4);
 1a4:	8c 2f       	mov	r24, r28
 1a6:	82 95       	swap	r24
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_send_nibble>
    lcd_send_nibble(data & 0x0F);
 1ae:	8c 2f       	mov	r24, r28
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_send_nibble>
 1b6:	87 ec       	ldi	r24, 0xC7	; 199
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_send_byte+0x2c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_send_byte+0x32>
 1c0:	00 00       	nop
    _delay_us(50);
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_init>:

void lcd_init() {
    LCD_DDR |= (1 << RS) | (1 << E) | (1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7);
 1c6:	8a b1       	in	r24, 0x0a	; 10
 1c8:	8c 6f       	ori	r24, 0xFC	; 252
 1ca:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	83 ef       	ldi	r24, 0xF3	; 243
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <lcd_init+0xc>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_init+0x16>
 1dc:	00 00       	nop
    _delay_ms(40);
    LCD_PORT &= ~((1 << RS) | (1 << E) | (1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7));
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	83 70       	andi	r24, 0x03	; 3
 1e2:	8b b9       	out	0x0b, r24	; 11

    lcd_send_nibble(0x03);
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_send_nibble>
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	9e e4       	ldi	r25, 0x4E	; 78
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init+0x28>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_init+0x2e>
 1f4:	00 00       	nop
    _delay_ms(5);
    lcd_send_nibble(0x03);
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	87 e5       	ldi	r24, 0x57	; 87
 1fe:	92 e0       	ldi	r25, 0x02	; 2
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x3a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init+0x40>
 206:	00 00       	nop
    _delay_us(150);
    lcd_send_nibble(0x03);
 208:	83 e0       	ldi	r24, 0x03	; 3
 20a:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_send_nibble>
    lcd_send_nibble(0x02);
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_send_nibble>

    lcd_send_byte(0x28, 0);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_send_byte>
    lcd_send_byte(0x0C, 0);
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	8c e0       	ldi	r24, 0x0C	; 12
 220:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_send_byte>
    lcd_send_byte(0x06, 0);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_send_byte>
    lcd_send_byte(0x01, 0);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	9f e1       	ldi	r25, 0x1F	; 31
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_init+0x72>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_init+0x78>
 23e:	00 00       	nop
 240:	08 95       	ret

00000242 <lcd_clear>:
    _delay_ms(2);
}

void lcd_clear() {
    lcd_send_byte(0x01, 0);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_send_byte>
 24a:	8f e3       	ldi	r24, 0x3F	; 63
 24c:	9f e1       	ldi	r25, 0x1F	; 31
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_clear+0xc>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_clear+0x12>
 254:	00 00       	nop
 256:	08 95       	ret

00000258 <lcd_goto>:
    _delay_ms(2);
}

void lcd_goto(uint8_t line, uint8_t pos) {
    uint8_t addr = pos + (line ? 0x40 : 0x00);
 258:	88 23       	and	r24, r24
 25a:	11 f0       	breq	.+4      	; 0x260 <lcd_goto+0x8>
 25c:	80 e4       	ldi	r24, 0x40	; 64
 25e:	01 c0       	rjmp	.+2      	; 0x262 <lcd_goto+0xa>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	86 0f       	add	r24, r22
    lcd_send_byte(0x80 | addr, 0);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	80 68       	ori	r24, 0x80	; 128
 268:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_send_byte>
 26c:	08 95       	ret

0000026e <lcd_print>:
}

void lcd_print(const char *str) {
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24
    while (*str) {
 274:	04 c0       	rjmp	.+8      	; 0x27e <lcd_print+0x10>
        lcd_send_byte(*str++, 1);
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_send_byte>
    uint8_t addr = pos + (line ? 0x40 : 0x00);
    lcd_send_byte(0x80 | addr, 0);
}

void lcd_print(const char *str) {
    while (*str) {
 27e:	88 81       	ld	r24, Y
 280:	81 11       	cpse	r24, r1
 282:	f9 cf       	rjmp	.-14     	; 0x276 <lcd_print+0x8>
        lcd_send_byte(*str++, 1);
    }
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <bits_to_string>:

// --- Função para mostrar bits como string com espaços ---
void bits_to_string(uint8_t val, char* str) {
    for (uint8_t i = 0; i < 8; i++) {
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	21 c0       	rjmp	.+66     	; 0x2d0 <bits_to_string+0x46>
        str[i * 2] = (val & (1 << (7 - i))) ? '1' : '0';
 28e:	49 2f       	mov	r20, r25
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	9a 01       	movw	r18, r20
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	db 01       	movw	r26, r22
 29a:	a2 0f       	add	r26, r18
 29c:	b3 1f       	adc	r27, r19
 29e:	e7 e0       	ldi	r30, 0x07	; 7
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	e4 1b       	sub	r30, r20
 2a4:	f5 0b       	sbc	r31, r21
 2a6:	48 2f       	mov	r20, r24
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <bits_to_string+0x26>
 2ac:	55 95       	asr	r21
 2ae:	47 95       	ror	r20
 2b0:	ea 95       	dec	r30
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <bits_to_string+0x22>
 2b4:	40 ff       	sbrs	r20, 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <bits_to_string+0x32>
 2b8:	41 e3       	ldi	r20, 0x31	; 49
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <bits_to_string+0x34>
 2bc:	40 e3       	ldi	r20, 0x30	; 48
 2be:	4c 93       	st	X, r20
        str[i * 2 + 1] = ' ';
 2c0:	2f 5f       	subi	r18, 0xFF	; 255
 2c2:	3f 4f       	sbci	r19, 0xFF	; 255
 2c4:	fb 01       	movw	r30, r22
 2c6:	e2 0f       	add	r30, r18
 2c8:	f3 1f       	adc	r31, r19
 2ca:	20 e2       	ldi	r18, 0x20	; 32
 2cc:	20 83       	st	Z, r18
    }
}

// --- Função para mostrar bits como string com espaços ---
void bits_to_string(uint8_t val, char* str) {
    for (uint8_t i = 0; i < 8; i++) {
 2ce:	9f 5f       	subi	r25, 0xFF	; 255
 2d0:	98 30       	cpi	r25, 0x08	; 8
 2d2:	e8 f2       	brcs	.-70     	; 0x28e <bits_to_string+0x4>
        str[i * 2] = (val & (1 << (7 - i))) ? '1' : '0';
        str[i * 2 + 1] = ' ';
    }
    str[16] = '\0';
 2d4:	fb 01       	movw	r30, r22
 2d6:	10 8a       	std	Z+16, r1	; 0x10
 2d8:	08 95       	ret

000002da <main>:
}

// --- Main ---

int main() {
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	a2 97       	sbiw	r28, 0x22	; 34
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
    spi_init();
 2ee:	0e 94 4b 00 	call	0x96	; 0x96 <spi_init>
    max7219_init();
 2f2:	0e 94 69 00 	call	0xd2	; 0xd2 <max7219_init>
    max7219_clear();
 2f6:	0e 94 7e 00 	call	0xfc	; 0xfc <max7219_clear>
    adc_init();
 2fa:	0e 94 8a 00 	call	0x114	; 0x114 <adc_init>
    lcd_init();
 2fe:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_init>

    int pos_x = 0, pos_y = 0;
    int last_pos_x = -1, last_pos_y = -1;
 302:	cc 24       	eor	r12, r12
 304:	ca 94       	dec	r12
 306:	dc 2c       	mov	r13, r12
 308:	aa 24       	eor	r10, r10
 30a:	aa 94       	dec	r10
 30c:	ba 2c       	mov	r11, r10
    char line_bits_str[17];
    char col_bits_str[17];

    while (1) {
        uint16_t adc_x = adc_read(4);
 30e:	84 e0       	ldi	r24, 0x04	; 4
 310:	0e 94 94 00 	call	0x128	; 0x128 <adc_read>
 314:	8c 01       	movw	r16, r24
        uint16_t adc_y = adc_read(5);
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	0e 94 94 00 	call	0x128	; 0x128 <adc_read>

        pos_x = (adc_x * 8) / 1024;
 31c:	00 0f       	add	r16, r16
 31e:	11 1f       	adc	r17, r17
 320:	00 0f       	add	r16, r16
 322:	11 1f       	adc	r17, r17
 324:	00 0f       	add	r16, r16
 326:	11 1f       	adc	r17, r17
 328:	e1 2e       	mov	r14, r17
 32a:	e6 94       	lsr	r14
 32c:	e6 94       	lsr	r14
 32e:	f1 2c       	mov	r15, r1
        pos_y = (adc_y * 8) / 1024;
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	09 2f       	mov	r16, r25
 33e:	06 95       	lsr	r16
 340:	06 95       	lsr	r16
 342:	10 e0       	ldi	r17, 0x00	; 0
        if (pos_x > 7) pos_x = 7;
 344:	28 e0       	ldi	r18, 0x08	; 8
 346:	e2 16       	cp	r14, r18
 348:	f1 04       	cpc	r15, r1
 34a:	2c f0       	brlt	.+10     	; 0x356 <main+0x7c>
 34c:	0f 2e       	mov	r0, r31
 34e:	f7 e0       	ldi	r31, 0x07	; 7
 350:	ef 2e       	mov	r14, r31
 352:	f1 2c       	mov	r15, r1
 354:	f0 2d       	mov	r31, r0
        if (pos_y > 7) pos_y = 7;
 356:	08 30       	cpi	r16, 0x08	; 8
 358:	11 05       	cpc	r17, r1
 35a:	14 f0       	brlt	.+4      	; 0x360 <main+0x86>
 35c:	07 e0       	ldi	r16, 0x07	; 7
 35e:	10 e0       	ldi	r17, 0x00	; 0

        if (pos_x != last_pos_x || pos_y != last_pos_y) {
 360:	ea 14       	cp	r14, r10
 362:	fb 04       	cpc	r15, r11
 364:	21 f4       	brne	.+8      	; 0x36e <main+0x94>
 366:	0c 15       	cp	r16, r12
 368:	1d 05       	cpc	r17, r13
 36a:	09 f4       	brne	.+2      	; 0x36e <main+0x94>
 36c:	46 c0       	rjmp	.+140    	; 0x3fa <main+0x120>
            if (last_pos_y >= 0 && last_pos_y <= 7) {
 36e:	88 e0       	ldi	r24, 0x08	; 8
 370:	c8 16       	cp	r12, r24
 372:	d1 04       	cpc	r13, r1
 374:	28 f4       	brcc	.+10     	; 0x380 <main+0xa6>
                max7219_send(last_pos_y + 1, 0x00);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	8c 0d       	add	r24, r12
 37c:	0e 94 5a 00 	call	0xb4	; 0xb4 <max7219_send>
            }

            uint8_t line_val = 1 << pos_x;
 380:	cc 24       	eor	r12, r12
 382:	c3 94       	inc	r12
 384:	d1 2c       	mov	r13, r1
 386:	56 01       	movw	r10, r12
 388:	0e 2c       	mov	r0, r14
 38a:	02 c0       	rjmp	.+4      	; 0x390 <main+0xb6>
 38c:	aa 0c       	add	r10, r10
 38e:	bb 1c       	adc	r11, r11
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <main+0xb2>
            max7219_send(pos_y + 1, line_val);
 394:	6a 2d       	mov	r22, r10
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	80 0f       	add	r24, r16
 39a:	0e 94 5a 00 	call	0xb4	; 0xb4 <max7219_send>

            uint8_t col_val = 1 << pos_y;
 39e:	00 2e       	mov	r0, r16
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <main+0xcc>
 3a2:	cc 0c       	add	r12, r12
 3a4:	dd 1c       	adc	r13, r13
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <main+0xc8>

            bits_to_string(line_val, line_bits_str);
 3aa:	be 01       	movw	r22, r28
 3ac:	6f 5f       	subi	r22, 0xFF	; 255
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	8a 2d       	mov	r24, r10
 3b2:	0e 94 45 01 	call	0x28a	; 0x28a <bits_to_string>
            bits_to_string(col_val, col_bits_str);
 3b6:	be 01       	movw	r22, r28
 3b8:	6e 5e       	subi	r22, 0xEE	; 238
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	8c 2d       	mov	r24, r12
 3be:	0e 94 45 01 	call	0x28a	; 0x28a <bits_to_string>

            lcd_clear();
 3c2:	0e 94 21 01 	call	0x242	; 0x242 <lcd_clear>
            lcd_goto(0, 0);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_goto>
            lcd_print("X:");
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_print>
            lcd_print(line_bits_str);
 3d6:	ce 01       	movw	r24, r28
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_print>
            lcd_goto(1, 0);
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_goto>
            lcd_print("Y:");
 3e6:	83 e0       	ldi	r24, 0x03	; 3
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_print>
            lcd_print(col_bits_str);
 3ee:	ce 01       	movw	r24, r28
 3f0:	42 96       	adiw	r24, 0x12	; 18
 3f2:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_print>

            last_pos_x = pos_x;
            last_pos_y = pos_y;
 3f6:	68 01       	movw	r12, r16
            lcd_print(line_bits_str);
            lcd_goto(1, 0);
            lcd_print("Y:");
            lcd_print(col_bits_str);

            last_pos_x = pos_x;
 3f8:	57 01       	movw	r10, r14
 3fa:	9f ef       	ldi	r25, 0xFF	; 255
 3fc:	21 ee       	ldi	r18, 0xE1	; 225
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	91 50       	subi	r25, 0x01	; 1
 402:	20 40       	sbci	r18, 0x00	; 0
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	80 cf       	rjmp	.-256    	; 0x30e <main+0x34>

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>

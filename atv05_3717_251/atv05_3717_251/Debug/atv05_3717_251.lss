
atv05_3717_251.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afc  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078f  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045c  00000000  00000000  000015b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040a  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002fd  00000000  00000000  00001eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000021b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <spi_init>:
		max7219_send(i, 0x00);
	}
}

void max7219_set_column(int col, uint8_t value) {
	max7219_send(col + 1, value);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	81 65       	ori	r24, 0x51	; 81
  8a:	8c bd       	out	0x2c, r24	; 44
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	85 b9       	out	0x05, r24	; 5
  92:	08 95       	ret

00000094 <spi_transmit>:
  94:	8e bd       	out	0x2e, r24	; 46
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <spi_transmit+0x2>
  9c:	08 95       	ret

0000009e <max7219_send>:
  9e:	cf 93       	push	r28
  a0:	c6 2f       	mov	r28, r22
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	9b 7f       	andi	r25, 0xFB	; 251
  a6:	95 b9       	out	0x05, r25	; 5
  a8:	0e 94 4a 00 	call	0x94	; 0x94 <spi_transmit>
  ac:	8c 2f       	mov	r24, r28
  ae:	0e 94 4a 00 	call	0x94	; 0x94 <spi_transmit>
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <max7219_init>:
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	89 e0       	ldi	r24, 0x09	; 9
  c8:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  cc:	63 e0       	ldi	r22, 0x03	; 3
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  d4:	67 e0       	ldi	r22, 0x07	; 7
  d6:	8b e0       	ldi	r24, 0x0B	; 11
  d8:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  e4:	08 95       	ret

000000e6 <main>:
}

int main() {
	spi_init();
  e6:	0e 94 40 00 	call	0x80	; 0x80 <spi_init>
	max7219_init();
  ea:	0e 94 5e 00 	call	0xbc	; 0xbc <max7219_init>

	while (1) {
		// 1) Acender colunas do 0 ao 7 (todas as linhas com bit da coluna ligado)
		// Vai da coluna 0 até 7
		for (int col = 0; col < 8; col++) {
  ee:	e1 2c       	mov	r14, r1
  f0:	f1 2c       	mov	r15, r1
  f2:	1d c0       	rjmp	.+58     	; 0x12e <main+0x48>
			uint8_t val = 1 << col;
  f4:	11 e0       	ldi	r17, 0x01	; 1
  f6:	0e 2c       	mov	r0, r14
  f8:	01 c0       	rjmp	.+2      	; 0xfc <main+0x16>
  fa:	11 0f       	add	r17, r17
  fc:	0a 94       	dec	r0
  fe:	ea f7       	brpl	.-6      	; 0xfa <main+0x14>
			for (int linha = 1; linha <= 8; linha++) {
 100:	c1 e0       	ldi	r28, 0x01	; 1
 102:	d0 e0       	ldi	r29, 0x00	; 0
 104:	05 c0       	rjmp	.+10     	; 0x110 <main+0x2a>
				max7219_send(linha, val);
 106:	61 2f       	mov	r22, r17
 108:	8c 2f       	mov	r24, r28
 10a:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
	while (1) {
		// 1) Acender colunas do 0 ao 7 (todas as linhas com bit da coluna ligado)
		// Vai da coluna 0 até 7
		for (int col = 0; col < 8; col++) {
			uint8_t val = 1 << col;
			for (int linha = 1; linha <= 8; linha++) {
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	c9 30       	cpi	r28, 0x09	; 9
 112:	d1 05       	cpc	r29, r1
 114:	c4 f3       	brlt	.-16     	; 0x106 <main+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	83 ec       	ldi	r24, 0xC3	; 195
 11a:	99 e0       	ldi	r25, 0x09	; 9
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x36>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x40>
 126:	00 00       	nop
	max7219_init();

	while (1) {
		// 1) Acender colunas do 0 ao 7 (todas as linhas com bit da coluna ligado)
		// Vai da coluna 0 até 7
		for (int col = 0; col < 8; col++) {
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	e2 1a       	sub	r14, r18
 12c:	f2 0a       	sbc	r15, r18
 12e:	88 e0       	ldi	r24, 0x08	; 8
 130:	e8 16       	cp	r14, r24
 132:	f1 04       	cpc	r15, r1
 134:	fc f2       	brlt	.-66     	; 0xf4 <main+0xe>
 136:	0f 2e       	mov	r0, r31
 138:	f6 e0       	ldi	r31, 0x06	; 6
 13a:	ef 2e       	mov	r14, r31
 13c:	f1 2c       	mov	r15, r1
 13e:	f0 2d       	mov	r31, r0
 140:	1d c0       	rjmp	.+58     	; 0x17c <main+0x96>
			_delay_ms(200);
		}

		// Volta da coluna 6 até 1 (não repete coluna 7 e 0)
		for (int col = 6; col > 0; col--) {
			uint8_t val = 1 << col;
 142:	11 e0       	ldi	r17, 0x01	; 1
 144:	0e 2c       	mov	r0, r14
 146:	01 c0       	rjmp	.+2      	; 0x14a <main+0x64>
 148:	11 0f       	add	r17, r17
 14a:	0a 94       	dec	r0
 14c:	ea f7       	brpl	.-6      	; 0x148 <main+0x62>
			for (int linha = 1; linha <= 8; linha++) {
 14e:	c1 e0       	ldi	r28, 0x01	; 1
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	05 c0       	rjmp	.+10     	; 0x15e <main+0x78>
				max7219_send(linha, val);
 154:	61 2f       	mov	r22, r17
 156:	8c 2f       	mov	r24, r28
 158:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
		}

		// Volta da coluna 6 até 1 (não repete coluna 7 e 0)
		for (int col = 6; col > 0; col--) {
			uint8_t val = 1 << col;
			for (int linha = 1; linha <= 8; linha++) {
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	c9 30       	cpi	r28, 0x09	; 9
 160:	d1 05       	cpc	r29, r1
 162:	c4 f3       	brlt	.-16     	; 0x154 <main+0x6e>
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	23 ec       	ldi	r18, 0xC3	; 195
 168:	89 e0       	ldi	r24, 0x09	; 9
 16a:	91 50       	subi	r25, 0x01	; 1
 16c:	20 40       	sbci	r18, 0x00	; 0
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x84>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x8e>
 174:	00 00       	nop
			}
			_delay_ms(200);
		}

		// Volta da coluna 6 até 1 (não repete coluna 7 e 0)
		for (int col = 6; col > 0; col--) {
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	e9 1a       	sub	r14, r25
 17a:	f1 08       	sbc	r15, r1
 17c:	1e 14       	cp	r1, r14
 17e:	1f 04       	cpc	r1, r15
 180:	04 f3       	brlt	.-64     	; 0x142 <main+0x5c>
 182:	01 e0       	ldi	r16, 0x01	; 1
 184:	10 e0       	ldi	r17, 0x00	; 0
 186:	1e c0       	rjmp	.+60     	; 0x1c4 <main+0xde>
		// 2) Linha acesa sobe (linha 1 até 8), coluna fixa na última coluna acesa
		//int col_fixa = 7;  // por exemplo, usa a última coluna acesa
		//uint8_t val = 1 << col_fixa;
		for (int linha = 1; linha <= 8; linha++) {
			for (int i = 1; i <= 8; i++) {
				if (i == linha) {
 188:	0c 17       	cp	r16, r28
 18a:	1d 07       	cpc	r17, r29
 18c:	29 f4       	brne	.+10     	; 0x198 <main+0xb2>
					max7219_send(i, 0xFF);  // linha inteira acesa
 18e:	6f ef       	ldi	r22, 0xFF	; 255
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <main+0xba>
					} else {
					max7219_send(i, 0x00);  // outras linhas apagadas
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>

		// 2) Linha acesa sobe (linha 1 até 8), coluna fixa na última coluna acesa
		//int col_fixa = 7;  // por exemplo, usa a última coluna acesa
		//uint8_t val = 1 << col_fixa;
		for (int linha = 1; linha <= 8; linha++) {
			for (int i = 1; i <= 8; i++) {
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <main+0xc2>
 1a4:	c1 e0       	ldi	r28, 0x01	; 1
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	c9 30       	cpi	r28, 0x09	; 9
 1aa:	d1 05       	cpc	r29, r1
 1ac:	6c f3       	brlt	.-38     	; 0x188 <main+0xa2>
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	83 ec       	ldi	r24, 0xC3	; 195
 1b2:	99 e0       	ldi	r25, 0x09	; 9
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0xce>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0xd8>
 1be:	00 00       	nop
		}

		// 2) Linha acesa sobe (linha 1 até 8), coluna fixa na última coluna acesa
		//int col_fixa = 7;  // por exemplo, usa a última coluna acesa
		//uint8_t val = 1 << col_fixa;
		for (int linha = 1; linha <= 8; linha++) {
 1c0:	0f 5f       	subi	r16, 0xFF	; 255
 1c2:	1f 4f       	sbci	r17, 0xFF	; 255
 1c4:	09 30       	cpi	r16, 0x09	; 9
 1c6:	11 05       	cpc	r17, r1
 1c8:	6c f3       	brlt	.-38     	; 0x1a4 <main+0xbe>
 1ca:	08 e0       	ldi	r16, 0x08	; 8
 1cc:	10 e0       	ldi	r17, 0x00	; 0
 1ce:	1e c0       	rjmp	.+60     	; 0x20c <main+0x126>
		}

		// 3) Linha acesa desce (linha 8 até 1), mesma coluna fixa
		for (int linha = 8; linha >= 1; linha--) {
			for (int i = 1; i <= 8; i++) {
				if (i == linha) {
 1d0:	0c 17       	cp	r16, r28
 1d2:	1d 07       	cpc	r17, r29
 1d4:	29 f4       	brne	.+10     	; 0x1e0 <main+0xfa>
					max7219_send(i, 0xFF);  // linha inteira acesa
 1d6:	6f ef       	ldi	r22, 0xFF	; 255
 1d8:	8c 2f       	mov	r24, r28
 1da:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <main+0x102>
					} else {
					max7219_send(i, 0x00);  // outras linhas apagadas
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
			_delay_ms(200);
		}

		// 3) Linha acesa desce (linha 8 até 1), mesma coluna fixa
		for (int linha = 8; linha >= 1; linha--) {
			for (int i = 1; i <= 8; i++) {
 1e8:	21 96       	adiw	r28, 0x01	; 1
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <main+0x10a>
 1ec:	c1 e0       	ldi	r28, 0x01	; 1
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
 1f0:	c9 30       	cpi	r28, 0x09	; 9
 1f2:	d1 05       	cpc	r29, r1
 1f4:	6c f3       	brlt	.-38     	; 0x1d0 <main+0xea>
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	83 ec       	ldi	r24, 0xC3	; 195
 1fa:	99 e0       	ldi	r25, 0x09	; 9
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x116>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x120>
 206:	00 00       	nop
			}
			_delay_ms(200);
		}

		// 3) Linha acesa desce (linha 8 até 1), mesma coluna fixa
		for (int linha = 8; linha >= 1; linha--) {
 208:	01 50       	subi	r16, 0x01	; 1
 20a:	11 09       	sbc	r17, r1
 20c:	10 16       	cp	r1, r16
 20e:	11 06       	cpc	r1, r17
 210:	6c f3       	brlt	.-38     	; 0x1ec <main+0x106>
 212:	6d cf       	rjmp	.-294    	; 0xee <main+0x8>

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>

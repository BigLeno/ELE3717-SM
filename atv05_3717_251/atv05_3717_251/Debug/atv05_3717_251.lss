
atv05_3717_251.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e5  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000782  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e0  00000000  00000000  00001467  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000449  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c2  00000000  00000000  00001d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001f0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <spi_init>:
		max7219_send(i, 0x00);
	}
}

void max7219_set_column(int col, uint8_t value) {
	max7219_send(col + 1, value);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	81 65       	ori	r24, 0x51	; 81
  8a:	8c bd       	out	0x2c, r24	; 44
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	85 b9       	out	0x05, r24	; 5
  92:	08 95       	ret

00000094 <spi_transmit>:
  94:	8e bd       	out	0x2e, r24	; 46
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <spi_transmit+0x2>
  9c:	08 95       	ret

0000009e <max7219_send>:
  9e:	cf 93       	push	r28
  a0:	c6 2f       	mov	r28, r22
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	9b 7f       	andi	r25, 0xFB	; 251
  a6:	95 b9       	out	0x05, r25	; 5
  a8:	0e 94 4a 00 	call	0x94	; 0x94 <spi_transmit>
  ac:	8c 2f       	mov	r24, r28
  ae:	0e 94 4a 00 	call	0x94	; 0x94 <spi_transmit>
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <max7219_init>:
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	89 e0       	ldi	r24, 0x09	; 9
  c8:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  cc:	63 e0       	ldi	r22, 0x03	; 3
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  d4:	67 e0       	ldi	r22, 0x07	; 7
  d6:	8b e0       	ldi	r24, 0x0B	; 11
  d8:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  e4:	08 95       	ret

000000e6 <max7219_clear>:
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	c1 e0       	ldi	r28, 0x01	; 1
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	05 c0       	rjmp	.+10     	; 0xfa <max7219_clear+0x14>
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
  f8:	21 96       	adiw	r28, 0x01	; 1
  fa:	c9 30       	cpi	r28, 0x09	; 9
  fc:	d1 05       	cpc	r29, r1
  fe:	c4 f3       	brlt	.-16     	; 0xf0 <max7219_clear+0xa>
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <adc_init>:
}

void adc_init() {
	// Configura o ADC para usar referência AVcc (5V) e seleciona canal inicial 0
	ADMUX = (1 << REFS0);
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Habilita ADC e configura prescaler para 128 (para 16 MHz CPU, ADC ~125 kHz)
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 10c:	87 e8       	ldi	r24, 0x87	; 135
 10e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	// Desliga entradas digitais nos ADC4 e ADC5 (PC4 e PC5) para reduzir interferência
	DIDR0 = (1 << ADC4D) | (1 << ADC5D);
 112:	80 e3       	ldi	r24, 0x30	; 48
 114:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 118:	08 95       	ret

0000011a <adc_read>:
}

uint16_t adc_read(uint8_t channel) {
	// Configurar e iniciar ADC, ajustar para o canal indicado (0 a 7)
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 11a:	ec e7       	ldi	r30, 0x7C	; 124
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	90 81       	ld	r25, Z
 120:	90 7f       	andi	r25, 0xF0	; 240
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	89 2b       	or	r24, r25
 126:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                     // Inicia conversão
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));               // Aguarda conversão terminar
 132:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 136:	86 fd       	sbrc	r24, 6
 138:	fc cf       	rjmp	.-8      	; 0x132 <adc_read+0x18>
	return ADCW;
 13a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 13e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 142:	08 95       	ret

00000144 <main>:



int main() {
	spi_init();
 144:	0e 94 40 00 	call	0x80	; 0x80 <spi_init>
	max7219_init();
 148:	0e 94 5e 00 	call	0xbc	; 0xbc <max7219_init>
	max7219_clear();
 14c:	0e 94 73 00 	call	0xe6	; 0xe6 <max7219_clear>
	adc_init();     // Chame aqui a inicialização do ADC
 150:	0e 94 83 00 	call	0x106	; 0x106 <adc_init>

	int pos_x = 0, pos_y = 0;
	int last_pos_x = 0, last_pos_y = 0;
 154:	f1 2c       	mov	r15, r1

	while(1) {
		uint16_t adc_x = adc_read(4); // PC4 -> ADC4
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	0e 94 8d 00 	call	0x11a	; 0x11a <adc_read>
 15c:	ec 01       	movw	r28, r24
		uint16_t adc_y = adc_read(5); // PC5 -> ADC5
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	0e 94 8d 00 	call	0x11a	; 0x11a <adc_read>

		pos_x = (adc_x * 8) / 1024;
 164:	cc 0f       	add	r28, r28
 166:	dd 1f       	adc	r29, r29
 168:	cc 0f       	add	r28, r28
 16a:	dd 1f       	adc	r29, r29
 16c:	cc 0f       	add	r28, r28
 16e:	dd 1f       	adc	r29, r29
 170:	0d 2f       	mov	r16, r29
 172:	06 95       	lsr	r16
 174:	06 95       	lsr	r16
 176:	10 e0       	ldi	r17, 0x00	; 0
		pos_y = (adc_y * 8) / 1024;
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	c9 2f       	mov	r28, r25
 186:	c6 95       	lsr	r28
 188:	c6 95       	lsr	r28
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	d2 2f       	mov	r29, r18

		if(pos_x > 7) pos_x = 7;
 18e:	08 30       	cpi	r16, 0x08	; 8
 190:	11 05       	cpc	r17, r1
 192:	14 f0       	brlt	.+4      	; 0x198 <main+0x54>
 194:	07 e0       	ldi	r16, 0x07	; 7
 196:	10 e0       	ldi	r17, 0x00	; 0
		if(pos_y > 7) pos_y = 7;
 198:	c8 30       	cpi	r28, 0x08	; 8
 19a:	d1 05       	cpc	r29, r1
 19c:	14 f0       	brlt	.+4      	; 0x1a2 <main+0x5e>
 19e:	c7 e0       	ldi	r28, 0x07	; 7
 1a0:	d0 e0       	ldi	r29, 0x00	; 0

		// Apaga o ponto anterior
		max7219_send(last_pos_y + 1, 0x00);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8f 0d       	add	r24, r15
 1a8:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>

		// Acende o ponto novo
		max7219_send(pos_y + 1, 1 << pos_x);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <main+0x72>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	0a 95       	dec	r16
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <main+0x6e>
 1ba:	8c 2f       	mov	r24, r28
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	0e 94 4f 00 	call	0x9e	; 0x9e <max7219_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	90 e7       	ldi	r25, 0x70	; 112
 1c6:	22 e0       	ldi	r18, 0x02	; 2
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	20 40       	sbci	r18, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x84>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x8e>
 1d2:	00 00       	nop

		last_pos_x = pos_x;
		last_pos_y = pos_y;
 1d4:	fc 2e       	mov	r15, r28
 1d6:	bf cf       	rjmp	.-130    	; 0x156 <main+0x12>

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>


atv04_3717_251.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000696  0000072a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800110  00800110  0000073a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001167  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ed  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000750  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  000028d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000558  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007bb  00000000  00000000  00002f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000371f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 02 	call	0x53a	; 0x53a <main>
  9e:	0c 94 49 03 	jmp	0x692	; 0x692 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_send_nibble>:
#define AUTO_REPEAT_SLOW   500   // 500ms entre incrementos lentos

// Funções LCD (como antes)
void lcd_send_nibble(uint8_t val)
{
	PORT_LCD &= ~LCD_DATA_MASK;
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	9b b9       	out	0x0b, r25	; 11
	PORT_LCD |= ((val << 4) & LCD_DATA_MASK);
  ac:	2b b1       	in	r18, 0x0b	; 11
  ae:	30 e1       	ldi	r19, 0x10	; 16
  b0:	83 9f       	mul	r24, r19
  b2:	c0 01       	movw	r24, r0
  b4:	11 24       	eor	r1, r1
  b6:	82 2b       	or	r24, r18
  b8:	8b b9       	out	0x0b, r24	; 11
	set_bit(PORT_LCD, EN);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_send_nibble+0x1c>
  c6:	00 00       	nop
	_delay_us(1);
	clr_bit(PORT_LCD, EN);
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	87 7f       	andi	r24, 0xF7	; 247
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	35 ed       	ldi	r19, 0xD5	; 213
  d0:	3a 95       	dec	r19
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_send_nibble+0x2a>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <lcd_send_byte>:
	_delay_us(40);
}

void lcd_send_byte(uint8_t c, uint8_t rs)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	c8 2f       	mov	r28, r24
  de:	d6 2f       	mov	r29, r22
	if (rs)
  e0:	66 23       	and	r22, r22
  e2:	21 f0       	breq	.+8      	; 0xec <lcd_send_byte+0x14>
	set_bit(PORT_LCD, RS);
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <lcd_send_byte+0x1a>
	else
	clr_bit(PORT_LCD, RS);
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	8b b9       	out	0x0b, r24	; 11

	lcd_send_nibble(c >> 4);
  f2:	8c 2f       	mov	r24, r28
  f4:	82 95       	swap	r24
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
	lcd_send_nibble(c & 0x0F);
  fc:	8c 2f       	mov	r24, r28
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>

	if (rs == 0 && (c == 0x01 || c == 0x02))
 104:	d1 11       	cpse	r29, r1
 106:	0a c0       	rjmp	.+20     	; 0x11c <lcd_send_byte+0x44>
 108:	c1 50       	subi	r28, 0x01	; 1
 10a:	c2 30       	cpi	r28, 0x02	; 2
 10c:	38 f4       	brcc	.+14     	; 0x11c <lcd_send_byte+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9f e1       	ldi	r25, 0x1F	; 31
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_send_byte+0x3a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_send_byte+0x40>
 118:	00 00       	nop
 11a:	04 c0       	rjmp	.+8      	; 0x124 <lcd_send_byte+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	95 ed       	ldi	r25, 0xD5	; 213
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_send_byte+0x46>
 122:	00 00       	nop
	_delay_ms(2);
	else
	_delay_us(40);
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_init>:

void lcd_init(void)
{
	DDR_LCD |= LCD_DATA_MASK | (1 << RS) | (1 << EN);
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	8c 6f       	ori	r24, 0xFC	; 252
 12e:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	83 ef       	ldi	r24, 0xF3	; 243
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <lcd_init+0xc>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x16>
 140:	00 00       	nop
	_delay_ms(40);
	clr_bit(PORT_LCD, RS);
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	8b b9       	out	0x0b, r24	; 11

	lcd_send_nibble(0x03);
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
 14e:	8f e1       	ldi	r24, 0x1F	; 31
 150:	9e e4       	ldi	r25, 0x4E	; 78
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_init+0x28>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_init+0x2e>
 158:	00 00       	nop
	_delay_ms(5);
	lcd_send_nibble(0x03);
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	87 e5       	ldi	r24, 0x57	; 87
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x3a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_init+0x40>
 16a:	00 00       	nop
	_delay_us(150);
	lcd_send_nibble(0x03);
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
 172:	87 e5       	ldi	r24, 0x57	; 87
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x4c>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_init+0x52>
 17c:	00 00       	nop
	_delay_us(150);
	lcd_send_nibble(0x02);
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
 184:	87 e5       	ldi	r24, 0x57	; 87
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0x5e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_init+0x64>
 18e:	00 00       	nop
	_delay_us(150);

	lcd_send_byte(0x28, 0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	88 e2       	ldi	r24, 0x28	; 40
 194:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
	lcd_send_byte(0x08, 0);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	88 e0       	ldi	r24, 0x08	; 8
 19c:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
	lcd_send_byte(0x01, 0);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f e3       	ldi	r24, 0x3F	; 63
 1aa:	9f e1       	ldi	r25, 0x1F	; 31
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0x82>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_init+0x88>
 1b2:	00 00       	nop
	_delay_ms(2);
	lcd_send_byte(0x06, 0);
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
	lcd_send_byte(0x0C, 0);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	8c e0       	ldi	r24, 0x0C	; 12
 1c0:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 1c4:	08 95       	ret

000001c6 <lcd_clear>:
}

void lcd_clear(void)
{
	lcd_send_byte(0x01, 0);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	9f e1       	ldi	r25, 0x1F	; 31
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_clear+0xc>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_clear+0x12>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <lcd_goto>:
	_delay_ms(2);
}

void lcd_goto(uint8_t linha, uint8_t coluna)
{
	uint8_t addr = coluna + (linha ? 0x40 : 0x00);
 1dc:	88 23       	and	r24, r24
 1de:	11 f0       	breq	.+4      	; 0x1e4 <lcd_goto+0x8>
 1e0:	80 e4       	ldi	r24, 0x40	; 64
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <lcd_goto+0xa>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	86 0f       	add	r24, r22
	lcd_send_byte(0x80 | addr, 0);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 1f0:	08 95       	ret

000001f2 <lcd_print>:
}

void lcd_print(char *str)
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	ec 01       	movw	r28, r24
	while (*str)
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <lcd_print+0x10>
	lcd_send_byte(*str++, 1);
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
	lcd_send_byte(0x80 | addr, 0);
}

void lcd_print(char *str)
{
	while (*str)
 202:	88 81       	ld	r24, Y
 204:	81 11       	cpse	r24, r1
 206:	f9 cf       	rjmp	.-14     	; 0x1fa <lcd_print+0x8>
	lcd_send_byte(*str++, 1);
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <lcd_print_num>:

// Imprime valor decimal (3 dígitos) sem usar sprintf
void lcd_print_num(uint8_t val)
{
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	00 d0       	rcall	.+0      	; 0x218 <lcd_print_num+0xa>
 218:	1f 92       	push	r1
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
	char buf[3];
	buf[0] = (val / 100) + '0';
 21e:	99 e2       	ldi	r25, 0x29	; 41
 220:	89 9f       	mul	r24, r25
 222:	91 2d       	mov	r25, r1
 224:	11 24       	eor	r1, r1
 226:	92 95       	swap	r25
 228:	9f 70       	andi	r25, 0x0F	; 15
 22a:	90 5d       	subi	r25, 0xD0	; 208
 22c:	99 83       	std	Y+1, r25	; 0x01
	buf[1] = ((val / 10) % 10) + '0';
 22e:	9d ec       	ldi	r25, 0xCD	; 205
 230:	89 9f       	mul	r24, r25
 232:	21 2d       	mov	r18, r1
 234:	11 24       	eor	r1, r1
 236:	26 95       	lsr	r18
 238:	26 95       	lsr	r18
 23a:	26 95       	lsr	r18
 23c:	29 9f       	mul	r18, r25
 23e:	91 2d       	mov	r25, r1
 240:	11 24       	eor	r1, r1
 242:	96 95       	lsr	r25
 244:	96 95       	lsr	r25
 246:	96 95       	lsr	r25
 248:	99 0f       	add	r25, r25
 24a:	39 2f       	mov	r19, r25
 24c:	33 0f       	add	r19, r19
 24e:	33 0f       	add	r19, r19
 250:	93 0f       	add	r25, r19
 252:	32 2f       	mov	r19, r18
 254:	39 1b       	sub	r19, r25
 256:	93 2f       	mov	r25, r19
 258:	90 5d       	subi	r25, 0xD0	; 208
 25a:	9a 83       	std	Y+2, r25	; 0x02
	buf[2] = (val % 10) + '0';
 25c:	22 0f       	add	r18, r18
 25e:	92 2f       	mov	r25, r18
 260:	99 0f       	add	r25, r25
 262:	99 0f       	add	r25, r25
 264:	29 0f       	add	r18, r25
 266:	82 1b       	sub	r24, r18
 268:	80 5d       	subi	r24, 0xD0	; 208
 26a:	8b 83       	std	Y+3, r24	; 0x03

	for (int i = 0; i < 3; i++)
 26c:	00 e0       	ldi	r16, 0x00	; 0
 26e:	10 e0       	ldi	r17, 0x00	; 0
 270:	0c c0       	rjmp	.+24     	; 0x28a <lcd_print_num+0x7c>
	{
		lcd_send_byte(buf[i], 1);
 272:	e1 e0       	ldi	r30, 0x01	; 1
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ec 0f       	add	r30, r28
 278:	fd 1f       	adc	r31, r29
 27a:	e0 0f       	add	r30, r16
 27c:	f1 1f       	adc	r31, r17
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	80 81       	ld	r24, Z
 282:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
	char buf[3];
	buf[0] = (val / 100) + '0';
	buf[1] = ((val / 10) % 10) + '0';
	buf[2] = (val % 10) + '0';

	for (int i = 0; i < 3; i++)
 286:	0f 5f       	subi	r16, 0xFF	; 255
 288:	1f 4f       	sbci	r17, 0xFF	; 255
 28a:	03 30       	cpi	r16, 0x03	; 3
 28c:	11 05       	cpc	r17, r1
 28e:	8c f3       	brlt	.-30     	; 0x272 <lcd_print_num+0x64>
	{
		lcd_send_byte(buf[i], 1);
	}
}
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <buttons_init>:

// Botões ------------------------------------------------------------
// Setup dos botões com pull-ups
void buttons_init()
{
	DDRC &= ~((1 << BTN_S1) | (1 << BTN_S2) | (1 << BTN_S3));
 2a0:	87 b1       	in	r24, 0x07	; 7
 2a2:	81 7f       	andi	r24, 0xF1	; 241
 2a4:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << BTN_S1) | (1 << BTN_S2) | (1 << BTN_S3);
 2a6:	88 b1       	in	r24, 0x08	; 8
 2a8:	8e 60       	ori	r24, 0x0E	; 14
 2aa:	88 b9       	out	0x08, r24	; 8
 2ac:	08 95       	ret

000002ae <button_pressed>:
}

// Leitura simples com debounce básica (20ms)
bool button_pressed(uint8_t pin)
{
	if ((PINC & (1 << pin)) == 0)
 2ae:	26 b1       	in	r18, 0x06	; 6
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	08 2e       	mov	r0, r24
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <button_pressed+0xc>
 2b6:	35 95       	asr	r19
 2b8:	27 95       	ror	r18
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <button_pressed+0x8>
 2be:	20 fd       	sbrc	r18, 0
 2c0:	15 c0       	rjmp	.+42     	; 0x2ec <button_pressed+0x3e>
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	39 ef       	ldi	r19, 0xF9	; 249
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	30 40       	sbci	r19, 0x00	; 0
 2cc:	40 40       	sbci	r20, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <button_pressed+0x1a>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <button_pressed+0x24>
 2d2:	00 00       	nop
	{
		_delay_ms(BTN_DEBOUNCE_MS);
		if ((PINC & (1 << pin)) == 0)
 2d4:	26 b1       	in	r18, 0x06	; 6
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	a9 01       	movw	r20, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <button_pressed+0x32>
 2dc:	55 95       	asr	r21
 2de:	47 95       	ror	r20
 2e0:	8a 95       	dec	r24
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <button_pressed+0x2e>
 2e4:	40 fd       	sbrc	r20, 0
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <button_pressed+0x42>
		return true;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	08 95       	ret
	}
	return false;
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret
 2f0:	80 e0       	ldi	r24, 0x00	; 0
}
 2f2:	08 95       	ret

000002f4 <delay_ms_tick>:
 2f4:	8f e9       	ldi	r24, 0x9F	; 159
 2f6:	9f e0       	ldi	r25, 0x0F	; 15
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <delay_ms_tick+0x4>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <delay_ms_tick+0xa>
 2fe:	00 00       	nop

// Função para delay não bloqueante - atualiza contador global
void delay_ms_tick(void)
{
	_delay_ms(1);
	millis_count++;
 300:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <millis_count>
 304:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <millis_count+0x1>
 308:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <millis_count+0x2>
 30c:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <millis_count+0x3>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	a1 1d       	adc	r26, r1
 314:	b1 1d       	adc	r27, r1
 316:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <millis_count>
 31a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <millis_count+0x1>
 31e:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <millis_count+0x2>
 322:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <millis_count+0x3>
 326:	08 95       	ret

00000328 <btn_update>:
}

// Atualiza estado da pressão de botões com debounce e controle de auto-repeat
void btn_update(volatile btn_state_t *btn, uint8_t pin)
{
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	fc 01       	movw	r30, r24
	bool currently_pressed = ((PINC & (1 << pin)) == 0);
 32e:	26 b1       	in	r18, 0x06	; 6
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <btn_update+0x10>
 334:	35 95       	asr	r19
 336:	27 95       	ror	r18
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <btn_update+0xc>

	if (currently_pressed && !btn->pressed)
 33c:	c9 01       	movw	r24, r18
 33e:	81 70       	andi	r24, 0x01	; 1
 340:	99 27       	eor	r25, r25
 342:	20 fd       	sbrc	r18, 0
 344:	1f c0       	rjmp	.+62     	; 0x384 <btn_update+0x5c>
 346:	20 81       	ld	r18, Z
 348:	21 11       	cpse	r18, r1
 34a:	1c c0       	rjmp	.+56     	; 0x384 <btn_update+0x5c>
	{
		btn->pressed = true;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 83       	st	Z, r24
		btn->press_start_ms = millis_count;
 350:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <millis_count>
 354:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <millis_count+0x1>
 358:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <millis_count+0x2>
 35c:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <millis_count+0x3>
 360:	81 83       	std	Z+1, r24	; 0x01
 362:	92 83       	std	Z+2, r25	; 0x02
 364:	a3 83       	std	Z+3, r26	; 0x03
 366:	b4 83       	std	Z+4, r27	; 0x04
		btn->last_act_ms = millis_count;
 368:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <millis_count>
 36c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <millis_count+0x1>
 370:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <millis_count+0x2>
 374:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <millis_count+0x3>
 378:	85 83       	std	Z+5, r24	; 0x05
 37a:	96 83       	std	Z+6, r25	; 0x06
 37c:	a7 83       	std	Z+7, r26	; 0x07
 37e:	b0 87       	std	Z+8, r27	; 0x08
		btn->auto_repeat_active = false;
 380:	11 86       	std	Z+9, r1	; 0x09
 382:	53 c0       	rjmp	.+166    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	}
	else if (!currently_pressed && btn->pressed)
 384:	89 2b       	or	r24, r25
 386:	31 f0       	breq	.+12     	; 0x394 <btn_update+0x6c>
 388:	80 81       	ld	r24, Z
 38a:	88 23       	and	r24, r24
 38c:	19 f0       	breq	.+6      	; 0x394 <btn_update+0x6c>
	{
		btn->pressed = false;
 38e:	10 82       	st	Z, r1
		btn->auto_repeat_active = false;
 390:	11 86       	std	Z+9, r1	; 0x09
 392:	4b c0       	rjmp	.+150    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	}
	else if (btn->pressed)
 394:	80 81       	ld	r24, Z
 396:	88 23       	and	r24, r24
 398:	09 f4       	brne	.+2      	; 0x39c <btn_update+0x74>
 39a:	47 c0       	rjmp	.+142    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	{
		uint32_t held_time = millis_count - btn->press_start_ms;
 39c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <millis_count>
 3a0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <millis_count+0x1>
 3a4:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <millis_count+0x2>
 3a8:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <millis_count+0x3>
 3ac:	41 81       	ldd	r20, Z+1	; 0x01
 3ae:	52 81       	ldd	r21, Z+2	; 0x02
 3b0:	63 81       	ldd	r22, Z+3	; 0x03
 3b2:	74 81       	ldd	r23, Z+4	; 0x04
 3b4:	84 1b       	sub	r24, r20
 3b6:	95 0b       	sbc	r25, r21
 3b8:	a6 0b       	sbc	r26, r22
 3ba:	b7 0b       	sbc	r27, r23

		if (held_time >= AUTO_REPEAT_WAIT)
 3bc:	88 38       	cpi	r24, 0x88	; 136
 3be:	23 e1       	ldi	r18, 0x13	; 19
 3c0:	92 07       	cpc	r25, r18
 3c2:	a1 05       	cpc	r26, r1
 3c4:	b1 05       	cpc	r27, r1
 3c6:	88 f1       	brcs	.+98     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		{
			uint32_t since_last = millis_count - btn->last_act_ms;
 3c8:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <millis_count>
 3cc:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <millis_count+0x1>
 3d0:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <millis_count+0x2>
 3d4:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <millis_count+0x3>
 3d8:	05 81       	ldd	r16, Z+5	; 0x05
 3da:	16 81       	ldd	r17, Z+6	; 0x06
 3dc:	27 81       	ldd	r18, Z+7	; 0x07
 3de:	30 85       	ldd	r19, Z+8	; 0x08
 3e0:	40 1b       	sub	r20, r16
 3e2:	51 0b       	sbc	r21, r17
 3e4:	62 0b       	sbc	r22, r18
 3e6:	73 0b       	sbc	r23, r19
			uint32_t interval = (held_time < AUTO_REPEAT_WAIT * 2) ? AUTO_REPEAT_SLOW : AUTO_REPEAT_FAST;
 3e8:	80 31       	cpi	r24, 0x10	; 16
 3ea:	97 42       	sbci	r25, 0x27	; 39
 3ec:	a1 05       	cpc	r26, r1
 3ee:	b1 05       	cpc	r27, r1
 3f0:	28 f4       	brcc	.+10     	; 0x3fc <btn_update+0xd4>
 3f2:	84 ef       	ldi	r24, 0xF4	; 244
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	a0 e0       	ldi	r26, 0x00	; 0
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fc:	84 e6       	ldi	r24, 0x64	; 100
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	a0 e0       	ldi	r26, 0x00	; 0
 402:	b0 e0       	ldi	r27, 0x00	; 0
			if (since_last >= interval)
 404:	48 17       	cp	r20, r24
 406:	59 07       	cpc	r21, r25
 408:	6a 07       	cpc	r22, r26
 40a:	7b 07       	cpc	r23, r27
 40c:	70 f0       	brcs	.+28     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			{
				btn->auto_repeat_active = true;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	81 87       	std	Z+9, r24	; 0x09
				btn->last_act_ms = millis_count;
 412:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <millis_count>
 416:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <millis_count+0x1>
 41a:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <millis_count+0x2>
 41e:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <millis_count+0x3>
 422:	85 83       	std	Z+5, r24	; 0x05
 424:	96 83       	std	Z+6, r25	; 0x06
 426:	a7 83       	std	Z+7, r26	; 0x07
 428:	b0 87       	std	Z+8, r27	; 0x08
			}
		}
	}
}
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	08 95       	ret

00000430 <btn_should_act>:

// Checa se o botão S2/S3 teve evento para incrementar ou decrementar
// Retorna true se deve aumentar/diminuir valor.
bool btn_should_act(volatile btn_state_t *btn, uint8_t pin)
{
 430:	fc 01       	movw	r30, r24
	static bool last_state_inc = false;
	static bool last_state_dec = false;

	bool current = ((PINC & (1 << pin)) == 0);
 432:	26 b1       	in	r18, 0x06	; 6
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	06 2e       	mov	r0, r22
 438:	02 c0       	rjmp	.+4      	; 0x43e <btn_should_act+0xe>
 43a:	35 95       	asr	r19
 43c:	27 95       	ror	r18
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <btn_should_act+0xa>
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	c9 01       	movw	r24, r18
 446:	81 70       	andi	r24, 0x01	; 1
 448:	99 27       	eor	r25, r25
 44a:	20 fd       	sbrc	r18, 0
 44c:	40 e0       	ldi	r20, 0x00	; 0

	bool triggered = false;

	if (pin == BTN_S2)
 44e:	62 30       	cpi	r22, 0x02	; 2
 450:	71 f4       	brne	.+28     	; 0x46e <btn_should_act+0x3e>
	{
		if (current && !last_state_inc) triggered = true;
 452:	89 2b       	or	r24, r25
 454:	31 f4       	brne	.+12     	; 0x462 <btn_should_act+0x32>
 456:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <last_state_inc.1948>
 45a:	88 23       	and	r24, r24
 45c:	21 f0       	breq	.+8      	; 0x466 <btn_should_act+0x36>
	static bool last_state_inc = false;
	static bool last_state_dec = false;

	bool current = ((PINC & (1 << pin)) == 0);

	bool triggered = false;
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	03 c0       	rjmp	.+6      	; 0x468 <btn_should_act+0x38>
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	01 c0       	rjmp	.+2      	; 0x468 <btn_should_act+0x38>

	if (pin == BTN_S2)
	{
		if (current && !last_state_inc) triggered = true;
 466:	91 e0       	ldi	r25, 0x01	; 1
		last_state_inc = current;
 468:	40 93 11 01 	sts	0x0111, r20	; 0x800111 <last_state_inc.1948>
 46c:	11 c0       	rjmp	.+34     	; 0x490 <btn_should_act+0x60>
	}
	else if (pin == BTN_S3)
 46e:	63 30       	cpi	r22, 0x03	; 3
 470:	71 f4       	brne	.+28     	; 0x48e <btn_should_act+0x5e>
	{
		if (current && !last_state_dec) triggered = true;
 472:	89 2b       	or	r24, r25
 474:	31 f4       	brne	.+12     	; 0x482 <btn_should_act+0x52>
 476:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 47a:	88 23       	and	r24, r24
 47c:	21 f0       	breq	.+8      	; 0x486 <btn_should_act+0x56>
	static bool last_state_inc = false;
	static bool last_state_dec = false;

	bool current = ((PINC & (1 << pin)) == 0);

	bool triggered = false;
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	03 c0       	rjmp	.+6      	; 0x488 <btn_should_act+0x58>
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	01 c0       	rjmp	.+2      	; 0x488 <btn_should_act+0x58>
		if (current && !last_state_inc) triggered = true;
		last_state_inc = current;
	}
	else if (pin == BTN_S3)
	{
		if (current && !last_state_dec) triggered = true;
 486:	91 e0       	ldi	r25, 0x01	; 1
		last_state_dec = current;
 488:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <__data_end>
 48c:	01 c0       	rjmp	.+2      	; 0x490 <btn_should_act+0x60>
	static bool last_state_inc = false;
	static bool last_state_dec = false;

	bool current = ((PINC & (1 << pin)) == 0);

	bool triggered = false;
 48e:	90 e0       	ldi	r25, 0x00	; 0
	else if (pin == BTN_S3)
	{
		if (current && !last_state_dec) triggered = true;
		last_state_dec = current;
	}
	return triggered || btn->auto_repeat_active;
 490:	91 11       	cpse	r25, r1
 492:	05 c0       	rjmp	.+10     	; 0x49e <btn_should_act+0x6e>
 494:	81 85       	ldd	r24, Z+9	; 0x09
 496:	88 23       	and	r24, r24
 498:	21 f0       	breq	.+8      	; 0x4a2 <btn_should_act+0x72>
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	08 95       	ret
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	08 95       	ret
 4a2:	80 e0       	ldi	r24, 0x00	; 0
}
 4a4:	08 95       	ret

000004a6 <lcd_atualiza_display>:
volatile int8_t seletor = 0; // -1 = sem seleção, 0=RED, 1=GREEN, 2=BLUE

// Atualiza LCD
void lcd_atualiza_display(void)
{
	lcd_clear();
 4a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clear>
	lcd_goto(0, 0);
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_goto>
	lcd_print("RED  GREEN BLUE");
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_print>

	lcd_goto(1, 0);
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_goto>

	// RED
	lcd_print_num(red_val);
 4c2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <red_val>
 4c6:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_print_num>
	if (seletor == 0)
 4ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <seletor>
 4ce:	81 11       	cpse	r24, r1
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <lcd_atualiza_display+0x36>
	lcd_send_byte('*', 1);
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	8a e2       	ldi	r24, 0x2A	; 42
 4d6:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <lcd_atualiza_display+0x3e>
	else
	lcd_send_byte(' ', 1);
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	80 e2       	ldi	r24, 0x20	; 32
 4e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
	lcd_send_byte(' ', 1);
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	80 e2       	ldi	r24, 0x20	; 32
 4e8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>

	// GREEN
	lcd_print_num(green_val);
 4ec:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <green_val>
 4f0:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_print_num>
	if (seletor == 1)
 4f4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <seletor>
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	29 f4       	brne	.+10     	; 0x506 <lcd_atualiza_display+0x60>
	lcd_send_byte('*', 1);
 4fc:	61 e0       	ldi	r22, 0x01	; 1
 4fe:	8a e2       	ldi	r24, 0x2A	; 42
 500:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 504:	04 c0       	rjmp	.+8      	; 0x50e <lcd_atualiza_display+0x68>
	else
	lcd_send_byte(' ', 1);
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	80 e2       	ldi	r24, 0x20	; 32
 50a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
	lcd_send_byte(' ', 1);
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	80 e2       	ldi	r24, 0x20	; 32
 512:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>

	// BLUE
	lcd_print_num(blue_val);
 516:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <blue_val>
 51a:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_print_num>
	if (seletor == 2)
 51e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <seletor>
 522:	82 30       	cpi	r24, 0x02	; 2
 524:	29 f4       	brne	.+10     	; 0x530 <lcd_atualiza_display+0x8a>
	lcd_send_byte('*', 1);
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	8a e2       	ldi	r24, 0x2A	; 42
 52a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 52e:	08 95       	ret
	else
	lcd_send_byte(' ', 1);
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	80 e2       	ldi	r24, 0x20	; 32
 534:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 538:	08 95       	ret

0000053a <main>:
}

// Programa principal
int main(void)
{
	buttons_init();
 53a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <buttons_init>
	lcd_init();
 53e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_init>
	lcd_atualiza_display();
 542:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_atualiza_display>

	btn_inc.pressed = false;
 546:	a4 e2       	ldi	r26, 0x24	; 36
 548:	b1 e0       	ldi	r27, 0x01	; 1
 54a:	1c 92       	st	X, r1
	btn_dec.pressed = false;
 54c:	ea e1       	ldi	r30, 0x1A	; 26
 54e:	f1 e0       	ldi	r31, 0x01	; 1
 550:	10 82       	st	Z, r1
	btn_inc.auto_repeat_active = false;
 552:	19 96       	adiw	r26, 0x09	; 9
 554:	1c 92       	st	X, r1
	btn_dec.auto_repeat_active = false;
 556:	11 86       	std	Z+9, r1	; 0x09

	while (1)
	{
		delay_ms_tick();
 558:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <delay_ms_tick>

		btn_update(&btn_inc, BTN_S2);
 55c:	62 e0       	ldi	r22, 0x02	; 2
 55e:	84 e2       	ldi	r24, 0x24	; 36
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 94 01 	call	0x328	; 0x328 <btn_update>
		btn_update(&btn_dec, BTN_S3);
 566:	63 e0       	ldi	r22, 0x03	; 3
 568:	8a e1       	ldi	r24, 0x1A	; 26
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	0e 94 94 01 	call	0x328	; 0x328 <btn_update>

		// Botão S1: ciclo seletor e toggle asterisco
		if (button_pressed(BTN_S1))
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 57 01 	call	0x2ae	; 0x2ae <button_pressed>
 576:	88 23       	and	r24, r24
 578:	29 f1       	breq	.+74     	; 0x5c4 <main+0x8a>
 57a:	2f ef       	ldi	r18, 0xFF	; 255
 57c:	81 ee       	ldi	r24, 0xE1	; 225
 57e:	94 e0       	ldi	r25, 0x04	; 4
 580:	21 50       	subi	r18, 0x01	; 1
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	90 40       	sbci	r25, 0x00	; 0
 586:	e1 f7       	brne	.-8      	; 0x580 <main+0x46>
 588:	00 c0       	rjmp	.+0      	; 0x58a <main+0x50>
 58a:	00 00       	nop
		{
			_delay_ms(100); // debounce seguro

			seletor++;
 58c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <seletor>
 590:	8f 5f       	subi	r24, 0xFF	; 255
 592:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <seletor>
			if (seletor > 3)
 596:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <seletor>
 59a:	84 30       	cpi	r24, 0x04	; 4
 59c:	14 f0       	brlt	.+4      	; 0x5a2 <main+0x68>
			seletor = 0;
 59e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <seletor>

			if (seletor == 3)
 5a2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <seletor>
 5a6:	83 30       	cpi	r24, 0x03	; 3
 5a8:	19 f4       	brne	.+6      	; 0x5b0 <main+0x76>
			seletor = -1; // sem seleção, asterisco desaparece
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <seletor>

			lcd_atualiza_display();
 5b0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_atualiza_display>

			while (button_pressed(BTN_S1))
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <main+0x80>
			delay_ms_tick();
 5b6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <delay_ms_tick>
			if (seletor == 3)
			seletor = -1; // sem seleção, asterisco desaparece

			lcd_atualiza_display();

			while (button_pressed(BTN_S1))
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 57 01 	call	0x2ae	; 0x2ae <button_pressed>
 5c0:	81 11       	cpse	r24, r1
 5c2:	f9 cf       	rjmp	.-14     	; 0x5b6 <main+0x7c>
			delay_ms_tick();
		}

		// Incremento
		if (seletor != -1 && btn_should_act(&btn_inc, BTN_S2))
 5c4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <seletor>
 5c8:	8f 3f       	cpi	r24, 0xFF	; 255
 5ca:	71 f1       	breq	.+92     	; 0x628 <main+0xee>
 5cc:	62 e0       	ldi	r22, 0x02	; 2
 5ce:	84 e2       	ldi	r24, 0x24	; 36
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 18 02 	call	0x430	; 0x430 <btn_should_act>
 5d6:	88 23       	and	r24, r24
 5d8:	39 f1       	breq	.+78     	; 0x628 <main+0xee>
		{
			switch (seletor)
 5da:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <seletor>
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	71 f0       	breq	.+28     	; 0x5fe <main+0xc4>
 5e2:	82 30       	cpi	r24, 0x02	; 2
 5e4:	b1 f0       	breq	.+44     	; 0x612 <main+0xd8>
 5e6:	81 11       	cpse	r24, r1
 5e8:	1d c0       	rjmp	.+58     	; 0x624 <main+0xea>
			{
				case 0:
				if (red_val < 255)
 5ea:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <red_val>
 5ee:	8f 3f       	cpi	r24, 0xFF	; 255
 5f0:	c9 f0       	breq	.+50     	; 0x624 <main+0xea>
				red_val++;
 5f2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <red_val>
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
 5f8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <red_val>
 5fc:	13 c0       	rjmp	.+38     	; 0x624 <main+0xea>
				break;
				case 1:
				if (green_val < 255)
 5fe:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <green_val>
 602:	8f 3f       	cpi	r24, 0xFF	; 255
 604:	79 f0       	breq	.+30     	; 0x624 <main+0xea>
				green_val++;
 606:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <green_val>
 60a:	8f 5f       	subi	r24, 0xFF	; 255
 60c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <green_val>
 610:	09 c0       	rjmp	.+18     	; 0x624 <main+0xea>
				break;
				case 2:
				if (blue_val < 255)
 612:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <blue_val>
 616:	8f 3f       	cpi	r24, 0xFF	; 255
 618:	29 f0       	breq	.+10     	; 0x624 <main+0xea>
				blue_val++;
 61a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <blue_val>
 61e:	8f 5f       	subi	r24, 0xFF	; 255
 620:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <blue_val>
				break;
			}
			lcd_atualiza_display();
 624:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_atualiza_display>
		}

		// Decremento
		if (seletor != -1 && btn_should_act(&btn_dec, BTN_S3))
 628:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <seletor>
 62c:	8f 3f       	cpi	r24, 0xFF	; 255
 62e:	09 f4       	brne	.+2      	; 0x632 <main+0xf8>
 630:	93 cf       	rjmp	.-218    	; 0x558 <main+0x1e>
 632:	63 e0       	ldi	r22, 0x03	; 3
 634:	8a e1       	ldi	r24, 0x1A	; 26
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 18 02 	call	0x430	; 0x430 <btn_should_act>
 63c:	88 23       	and	r24, r24
 63e:	09 f4       	brne	.+2      	; 0x642 <main+0x108>
 640:	8b cf       	rjmp	.-234    	; 0x558 <main+0x1e>
		{
			switch (seletor)
 642:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <seletor>
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	71 f0       	breq	.+28     	; 0x666 <main+0x12c>
 64a:	82 30       	cpi	r24, 0x02	; 2
 64c:	b1 f0       	breq	.+44     	; 0x67a <main+0x140>
 64e:	81 11       	cpse	r24, r1
 650:	1d c0       	rjmp	.+58     	; 0x68c <main+0x152>
			{
				case 0:
				if (red_val > 0)
 652:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <red_val>
 656:	88 23       	and	r24, r24
 658:	c9 f0       	breq	.+50     	; 0x68c <main+0x152>
				red_val--;
 65a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <red_val>
 65e:	81 50       	subi	r24, 0x01	; 1
 660:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <red_val>
 664:	13 c0       	rjmp	.+38     	; 0x68c <main+0x152>
				break;
				case 1:
				if (green_val > 0)
 666:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <green_val>
 66a:	88 23       	and	r24, r24
 66c:	79 f0       	breq	.+30     	; 0x68c <main+0x152>
				green_val--;
 66e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <green_val>
 672:	81 50       	subi	r24, 0x01	; 1
 674:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <green_val>
 678:	09 c0       	rjmp	.+18     	; 0x68c <main+0x152>
				break;
				case 2:
				if (blue_val > 0)
 67a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <blue_val>
 67e:	88 23       	and	r24, r24
 680:	29 f0       	breq	.+10     	; 0x68c <main+0x152>
				blue_val--;
 682:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <blue_val>
 686:	81 50       	subi	r24, 0x01	; 1
 688:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <blue_val>
				break;
			}
			lcd_atualiza_display();
 68c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_atualiza_display>
 690:	63 cf       	rjmp	.-314    	; 0x558 <main+0x1e>

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>

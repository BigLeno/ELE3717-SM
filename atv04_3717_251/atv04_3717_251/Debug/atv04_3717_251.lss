
atv04_3717_251.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000702  00000796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000702  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800118  00800118  000007ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011bb  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ff  00000000  00000000  00001a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007dc  00000000  00000000  0000226a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a3  00000000  00000000  00002bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c7  00000000  00000000  0000314f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003a16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bf 02 	call	0x57e	; 0x57e <main>
  9e:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_send_nibble>:
	buf[1] = ((val / 10) % 10) + '0';
	buf[2] = (val % 10) + '0';

	for (int i = 0; i < 3; i++)
	lcd_send_byte(buf[i], 1);
}
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	9b b9       	out	0x0b, r25	; 11
  ac:	2b b1       	in	r18, 0x0b	; 11
  ae:	30 e1       	ldi	r19, 0x10	; 16
  b0:	83 9f       	mul	r24, r19
  b2:	c0 01       	movw	r24, r0
  b4:	11 24       	eor	r1, r1
  b6:	82 2b       	or	r24, r18
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_send_nibble+0x1c>
  c6:	00 00       	nop
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	87 7f       	andi	r24, 0xF7	; 247
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	35 ed       	ldi	r19, 0xD5	; 213
  d0:	3a 95       	dec	r19
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_send_nibble+0x2a>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <lcd_send_byte>:
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	c8 2f       	mov	r28, r24
  de:	d6 2f       	mov	r29, r22
  e0:	66 23       	and	r22, r22
  e2:	21 f0       	breq	.+8      	; 0xec <lcd_send_byte+0x14>
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <lcd_send_byte+0x1a>
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	8c 2f       	mov	r24, r28
  f4:	82 95       	swap	r24
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
  fc:	8c 2f       	mov	r24, r28
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
 104:	d1 11       	cpse	r29, r1
 106:	0a c0       	rjmp	.+20     	; 0x11c <lcd_send_byte+0x44>
 108:	c1 50       	subi	r28, 0x01	; 1
 10a:	c2 30       	cpi	r28, 0x02	; 2
 10c:	38 f4       	brcc	.+14     	; 0x11c <lcd_send_byte+0x44>
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9f e1       	ldi	r25, 0x1F	; 31
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_send_byte+0x3a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_send_byte+0x40>
 118:	00 00       	nop
 11a:	04 c0       	rjmp	.+8      	; 0x124 <lcd_send_byte+0x4c>
 11c:	95 ed       	ldi	r25, 0xD5	; 213
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_send_byte+0x46>
 122:	00 00       	nop
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_init>:
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	8c 6f       	ori	r24, 0xFC	; 252
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	83 ef       	ldi	r24, 0xF3	; 243
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <lcd_init+0xc>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x16>
 140:	00 00       	nop
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	8b b9       	out	0x0b, r24	; 11
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
 14e:	8f e1       	ldi	r24, 0x1F	; 31
 150:	9e e4       	ldi	r25, 0x4E	; 78
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_init+0x28>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_init+0x2e>
 158:	00 00       	nop
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
 160:	87 e5       	ldi	r24, 0x57	; 87
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x3a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_init+0x40>
 16a:	00 00       	nop
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
 172:	87 e5       	ldi	r24, 0x57	; 87
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x4c>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_init+0x52>
 17c:	00 00       	nop
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send_nibble>
 184:	87 e5       	ldi	r24, 0x57	; 87
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0x5e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_init+0x64>
 18e:	00 00       	nop
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	88 e2       	ldi	r24, 0x28	; 40
 194:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	88 e0       	ldi	r24, 0x08	; 8
 19c:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 1a8:	8f e3       	ldi	r24, 0x3F	; 63
 1aa:	9f e1       	ldi	r25, 0x1F	; 31
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0x82>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_init+0x88>
 1b2:	00 00       	nop
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	8c e0       	ldi	r24, 0x0C	; 12
 1c0:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 1c4:	08 95       	ret

000001c6 <lcd_clear>:
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	9f e1       	ldi	r25, 0x1F	; 31
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_clear+0xc>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_clear+0x12>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <lcd_goto>:
 1dc:	88 23       	and	r24, r24
 1de:	11 f0       	breq	.+4      	; 0x1e4 <lcd_goto+0x8>
 1e0:	80 e4       	ldi	r24, 0x40	; 64
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <lcd_goto+0xa>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	86 0f       	add	r24, r22
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 1f0:	08 95       	ret

000001f2 <lcd_print>:
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	ec 01       	movw	r28, r24
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <lcd_print+0x10>
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
 202:	88 81       	ld	r24, Y
 204:	81 11       	cpse	r24, r1
 206:	f9 cf       	rjmp	.-14     	; 0x1fa <lcd_print+0x8>
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <buttons_init>:

// Bot�es setup e leitura
void buttons_init()
{
	DDRC &= ~((1 << BTN_S1) | (1 << BTN_S2) | (1 << BTN_S3));
 20e:	87 b1       	in	r24, 0x07	; 7
 210:	81 7f       	andi	r24, 0xF1	; 241
 212:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << BTN_S1) | (1 << BTN_S2) | (1 << BTN_S3);
 214:	88 b1       	in	r24, 0x08	; 8
 216:	8e 60       	ori	r24, 0x0E	; 14
 218:	88 b9       	out	0x08, r24	; 8
 21a:	08 95       	ret

0000021c <button_pressed>:
}

bool button_pressed(uint8_t pin)
{
	if ((PINC & (1 << pin)) == 0)
 21c:	26 b1       	in	r18, 0x06	; 6
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	08 2e       	mov	r0, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <button_pressed+0xc>
 224:	35 95       	asr	r19
 226:	27 95       	ror	r18
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <button_pressed+0x8>
 22c:	20 fd       	sbrc	r18, 0
 22e:	15 c0       	rjmp	.+42     	; 0x25a <button_pressed+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	39 ef       	ldi	r19, 0xF9	; 249
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	21 50       	subi	r18, 0x01	; 1
 238:	30 40       	sbci	r19, 0x00	; 0
 23a:	40 40       	sbci	r20, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <button_pressed+0x1a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <button_pressed+0x24>
 240:	00 00       	nop
	{
		_delay_ms(BTN_DEBOUNCE_MS);
		if ((PINC & (1 << pin)) == 0)
 242:	26 b1       	in	r18, 0x06	; 6
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	a9 01       	movw	r20, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <button_pressed+0x32>
 24a:	55 95       	asr	r21
 24c:	47 95       	ror	r20
 24e:	8a 95       	dec	r24
 250:	e2 f7       	brpl	.-8      	; 0x24a <button_pressed+0x2e>
 252:	40 fd       	sbrc	r20, 0
 254:	04 c0       	rjmp	.+8      	; 0x25e <button_pressed+0x42>
		return true;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
	}
	return false;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	08 95       	ret
 25e:	80 e0       	ldi	r24, 0x00	; 0
}
 260:	08 95       	ret

00000262 <delay_ms_tick>:
 262:	8f e9       	ldi	r24, 0x9F	; 159
 264:	9f e0       	ldi	r25, 0x0F	; 15
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <delay_ms_tick+0x4>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <delay_ms_tick+0xa>
 26c:	00 00       	nop
volatile uint32_t millis_count = 0;

void delay_ms_tick(void)
{
	_delay_ms(1);
	millis_count++;
 26e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <millis_count>
 272:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <millis_count+0x1>
 276:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <millis_count+0x2>
 27a:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <millis_count+0x3>
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	a1 1d       	adc	r26, r1
 282:	b1 1d       	adc	r27, r1
 284:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <millis_count>
 288:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <millis_count+0x1>
 28c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <millis_count+0x2>
 290:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <millis_count+0x3>
 294:	08 95       	ret

00000296 <btn_update>:
}

void btn_update(volatile btn_state_t *btn, uint8_t pin)
{
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	fc 01       	movw	r30, r24
	bool currently_pressed = ((PINC & (1 << pin)) == 0);
 29c:	26 b1       	in	r18, 0x06	; 6
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <btn_update+0x10>
 2a2:	35 95       	asr	r19
 2a4:	27 95       	ror	r18
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <btn_update+0xc>

	if (currently_pressed && !btn->pressed)
 2aa:	c9 01       	movw	r24, r18
 2ac:	81 70       	andi	r24, 0x01	; 1
 2ae:	99 27       	eor	r25, r25
 2b0:	20 fd       	sbrc	r18, 0
 2b2:	1f c0       	rjmp	.+62     	; 0x2f2 <btn_update+0x5c>
 2b4:	20 81       	ld	r18, Z
 2b6:	21 11       	cpse	r18, r1
 2b8:	1c c0       	rjmp	.+56     	; 0x2f2 <btn_update+0x5c>
	{
		btn->pressed = true;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24
		btn->press_start_ms = millis_count;
 2be:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <millis_count>
 2c2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <millis_count+0x1>
 2c6:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <millis_count+0x2>
 2ca:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <millis_count+0x3>
 2ce:	81 83       	std	Z+1, r24	; 0x01
 2d0:	92 83       	std	Z+2, r25	; 0x02
 2d2:	a3 83       	std	Z+3, r26	; 0x03
 2d4:	b4 83       	std	Z+4, r27	; 0x04
		btn->last_act_ms = millis_count;
 2d6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <millis_count>
 2da:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <millis_count+0x1>
 2de:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <millis_count+0x2>
 2e2:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <millis_count+0x3>
 2e6:	85 83       	std	Z+5, r24	; 0x05
 2e8:	96 83       	std	Z+6, r25	; 0x06
 2ea:	a7 83       	std	Z+7, r26	; 0x07
 2ec:	b0 87       	std	Z+8, r27	; 0x08
		btn->auto_repeat_active = false;
 2ee:	11 86       	std	Z+9, r1	; 0x09
 2f0:	53 c0       	rjmp	.+166    	; 0x398 <btn_update+0x102>
	}
	else if (!currently_pressed && btn->pressed)
 2f2:	89 2b       	or	r24, r25
 2f4:	31 f0       	breq	.+12     	; 0x302 <btn_update+0x6c>
 2f6:	80 81       	ld	r24, Z
 2f8:	88 23       	and	r24, r24
 2fa:	19 f0       	breq	.+6      	; 0x302 <btn_update+0x6c>
	{
		btn->pressed = false;
 2fc:	10 82       	st	Z, r1
		btn->auto_repeat_active = false;
 2fe:	11 86       	std	Z+9, r1	; 0x09
 300:	4b c0       	rjmp	.+150    	; 0x398 <btn_update+0x102>
	}
	else if (btn->pressed)
 302:	80 81       	ld	r24, Z
 304:	88 23       	and	r24, r24
 306:	09 f4       	brne	.+2      	; 0x30a <btn_update+0x74>
 308:	47 c0       	rjmp	.+142    	; 0x398 <btn_update+0x102>
	{
		uint32_t held_time = millis_count - btn->press_start_ms;
 30a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <millis_count>
 30e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <millis_count+0x1>
 312:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <millis_count+0x2>
 316:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <millis_count+0x3>
 31a:	41 81       	ldd	r20, Z+1	; 0x01
 31c:	52 81       	ldd	r21, Z+2	; 0x02
 31e:	63 81       	ldd	r22, Z+3	; 0x03
 320:	74 81       	ldd	r23, Z+4	; 0x04
 322:	84 1b       	sub	r24, r20
 324:	95 0b       	sbc	r25, r21
 326:	a6 0b       	sbc	r26, r22
 328:	b7 0b       	sbc	r27, r23

		if (held_time >= AUTO_REPEAT_WAIT)
 32a:	88 38       	cpi	r24, 0x88	; 136
 32c:	23 e1       	ldi	r18, 0x13	; 19
 32e:	92 07       	cpc	r25, r18
 330:	a1 05       	cpc	r26, r1
 332:	b1 05       	cpc	r27, r1
 334:	88 f1       	brcs	.+98     	; 0x398 <btn_update+0x102>
		{
			uint32_t since_last = millis_count - btn->last_act_ms;
 336:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <millis_count>
 33a:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <millis_count+0x1>
 33e:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <millis_count+0x2>
 342:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <millis_count+0x3>
 346:	05 81       	ldd	r16, Z+5	; 0x05
 348:	16 81       	ldd	r17, Z+6	; 0x06
 34a:	27 81       	ldd	r18, Z+7	; 0x07
 34c:	30 85       	ldd	r19, Z+8	; 0x08
 34e:	40 1b       	sub	r20, r16
 350:	51 0b       	sbc	r21, r17
 352:	62 0b       	sbc	r22, r18
 354:	73 0b       	sbc	r23, r19
			uint32_t interval = (held_time < AUTO_REPEAT_WAIT * 2) ? AUTO_REPEAT_SLOW : AUTO_REPEAT_FAST;
 356:	80 31       	cpi	r24, 0x10	; 16
 358:	97 42       	sbci	r25, 0x27	; 39
 35a:	a1 05       	cpc	r26, r1
 35c:	b1 05       	cpc	r27, r1
 35e:	28 f4       	brcc	.+10     	; 0x36a <btn_update+0xd4>
 360:	84 ef       	ldi	r24, 0xF4	; 244
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	a0 e0       	ldi	r26, 0x00	; 0
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	04 c0       	rjmp	.+8      	; 0x372 <btn_update+0xdc>
 36a:	84 e6       	ldi	r24, 0x64	; 100
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	a0 e0       	ldi	r26, 0x00	; 0
 370:	b0 e0       	ldi	r27, 0x00	; 0
			if (since_last >= interval)
 372:	48 17       	cp	r20, r24
 374:	59 07       	cpc	r21, r25
 376:	6a 07       	cpc	r22, r26
 378:	7b 07       	cpc	r23, r27
 37a:	70 f0       	brcs	.+28     	; 0x398 <btn_update+0x102>
			{
				btn->auto_repeat_active = true;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	81 87       	std	Z+9, r24	; 0x09
				btn->last_act_ms = millis_count;
 380:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <millis_count>
 384:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <millis_count+0x1>
 388:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <millis_count+0x2>
 38c:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <millis_count+0x3>
 390:	85 83       	std	Z+5, r24	; 0x05
 392:	96 83       	std	Z+6, r25	; 0x06
 394:	a7 83       	std	Z+7, r26	; 0x07
 396:	b0 87       	std	Z+8, r27	; 0x08
			}
		}
	}
}
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	08 95       	ret

0000039e <btn_should_act>:

bool btn_should_act(volatile btn_state_t *btn, uint8_t pin)
{
 39e:	fc 01       	movw	r30, r24
	static bool last_state_inc = false;
	static bool last_state_dec = false;

	bool current = ((PINC & (1 << pin)) == 0);
 3a0:	26 b1       	in	r18, 0x06	; 6
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	06 2e       	mov	r0, r22
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <btn_should_act+0xe>
 3a8:	35 95       	asr	r19
 3aa:	27 95       	ror	r18
 3ac:	0a 94       	dec	r0
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <btn_should_act+0xa>
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	c9 01       	movw	r24, r18
 3b4:	81 70       	andi	r24, 0x01	; 1
 3b6:	99 27       	eor	r25, r25
 3b8:	20 fd       	sbrc	r18, 0
 3ba:	40 e0       	ldi	r20, 0x00	; 0

	bool triggered = false;

	if (pin == BTN_S2)
 3bc:	62 30       	cpi	r22, 0x02	; 2
 3be:	71 f4       	brne	.+28     	; 0x3dc <btn_should_act+0x3e>
	{
		if (current && !last_state_inc) triggered = true;
 3c0:	89 2b       	or	r24, r25
 3c2:	31 f4       	brne	.+12     	; 0x3d0 <btn_should_act+0x32>
 3c4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <last_state_inc.1948>
 3c8:	88 23       	and	r24, r24
 3ca:	21 f0       	breq	.+8      	; 0x3d4 <btn_should_act+0x36>
	static bool last_state_inc = false;
	static bool last_state_dec = false;

	bool current = ((PINC & (1 << pin)) == 0);

	bool triggered = false;
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <btn_should_act+0x38>
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <btn_should_act+0x38>

	if (pin == BTN_S2)
	{
		if (current && !last_state_inc) triggered = true;
 3d4:	91 e0       	ldi	r25, 0x01	; 1
		last_state_inc = current;
 3d6:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <last_state_inc.1948>
 3da:	11 c0       	rjmp	.+34     	; 0x3fe <btn_should_act+0x60>
	}
	else if (pin == BTN_S3)
 3dc:	63 30       	cpi	r22, 0x03	; 3
 3de:	71 f4       	brne	.+28     	; 0x3fc <btn_should_act+0x5e>
	{
		if (current && !last_state_dec) triggered = true;
 3e0:	89 2b       	or	r24, r25
 3e2:	31 f4       	brne	.+12     	; 0x3f0 <btn_should_act+0x52>
 3e4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 3e8:	88 23       	and	r24, r24
 3ea:	21 f0       	breq	.+8      	; 0x3f4 <btn_should_act+0x56>
	static bool last_state_inc = false;
	static bool last_state_dec = false;

	bool current = ((PINC & (1 << pin)) == 0);

	bool triggered = false;
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <btn_should_act+0x58>
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <btn_should_act+0x58>
		if (current && !last_state_inc) triggered = true;
		last_state_inc = current;
	}
	else if (pin == BTN_S3)
	{
		if (current && !last_state_dec) triggered = true;
 3f4:	91 e0       	ldi	r25, 0x01	; 1
		last_state_dec = current;
 3f6:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <__data_end>
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <btn_should_act+0x60>
	static bool last_state_inc = false;
	static bool last_state_dec = false;

	bool current = ((PINC & (1 << pin)) == 0);

	bool triggered = false;
 3fc:	90 e0       	ldi	r25, 0x00	; 0
	else if (pin == BTN_S3)
	{
		if (current && !last_state_dec) triggered = true;
		last_state_dec = current;
	}
	return triggered || btn->auto_repeat_active;
 3fe:	91 11       	cpse	r25, r1
 400:	05 c0       	rjmp	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 402:	81 85       	ldd	r24, Z+9	; 0x09
 404:	88 23       	and	r24, r24
 406:	21 f0       	breq	.+8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	08 95       	ret
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	08 95       	ret
 410:	80 e0       	ldi	r24, 0x00	; 0
}
 412:	08 95       	ret

00000414 <lcd_update_digit>:

// Colunas base para os valores na linha 1
const uint8_t col_base[3] = {0, 7, 12};

void lcd_update_digit(uint8_t cor_idx, uint8_t val, bool selecionado)
{
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	00 d0       	rcall	.+0      	; 0x420 <lcd_update_digit+0xc>
 420:	1f 92       	push	r1
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
	if (cor_idx > 2) return;
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	08 f0       	brcs	.+2      	; 0x42c <lcd_update_digit+0x18>
 42a:	4b c0       	rjmp	.+150    	; 0x4c2 <lcd_update_digit+0xae>
 42c:	f4 2e       	mov	r15, r20
 42e:	16 2f       	mov	r17, r22

	lcd_goto(1, col_base[cor_idx]);
 430:	e8 2f       	mov	r30, r24
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	ec 5e       	subi	r30, 0xEC	; 236
 436:	fe 4f       	sbci	r31, 0xFE	; 254
 438:	60 81       	ld	r22, Z
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_goto>

	char buf[3];
	buf[0] = (val / 100) + '0';
 440:	89 e2       	ldi	r24, 0x29	; 41
 442:	18 9f       	mul	r17, r24
 444:	81 2d       	mov	r24, r1
 446:	11 24       	eor	r1, r1
 448:	82 95       	swap	r24
 44a:	8f 70       	andi	r24, 0x0F	; 15
 44c:	80 5d       	subi	r24, 0xD0	; 208
 44e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = ((val / 10) % 10) + '0';
 450:	8d ec       	ldi	r24, 0xCD	; 205
 452:	18 9f       	mul	r17, r24
 454:	91 2d       	mov	r25, r1
 456:	11 24       	eor	r1, r1
 458:	96 95       	lsr	r25
 45a:	96 95       	lsr	r25
 45c:	96 95       	lsr	r25
 45e:	98 9f       	mul	r25, r24
 460:	81 2d       	mov	r24, r1
 462:	11 24       	eor	r1, r1
 464:	86 95       	lsr	r24
 466:	86 95       	lsr	r24
 468:	86 95       	lsr	r24
 46a:	88 0f       	add	r24, r24
 46c:	28 2f       	mov	r18, r24
 46e:	22 0f       	add	r18, r18
 470:	22 0f       	add	r18, r18
 472:	82 0f       	add	r24, r18
 474:	29 2f       	mov	r18, r25
 476:	28 1b       	sub	r18, r24
 478:	82 2f       	mov	r24, r18
 47a:	80 5d       	subi	r24, 0xD0	; 208
 47c:	8a 83       	std	Y+2, r24	; 0x02
	buf[2] = (val % 10) + '0';
 47e:	99 0f       	add	r25, r25
 480:	89 2f       	mov	r24, r25
 482:	88 0f       	add	r24, r24
 484:	88 0f       	add	r24, r24
 486:	98 0f       	add	r25, r24
 488:	19 1b       	sub	r17, r25
 48a:	10 5d       	subi	r17, 0xD0	; 208
 48c:	1b 83       	std	Y+3, r17	; 0x03

	for (int i = 0; i < 3; i++)
 48e:	00 e0       	ldi	r16, 0x00	; 0
 490:	10 e0       	ldi	r17, 0x00	; 0
 492:	0c c0       	rjmp	.+24     	; 0x4ac <lcd_update_digit+0x98>
	lcd_send_byte(buf[i], 1);
 494:	e1 e0       	ldi	r30, 0x01	; 1
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	ec 0f       	add	r30, r28
 49a:	fd 1f       	adc	r31, r29
 49c:	e0 0f       	add	r30, r16
 49e:	f1 1f       	adc	r31, r17
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	80 81       	ld	r24, Z
 4a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
	char buf[3];
	buf[0] = (val / 100) + '0';
	buf[1] = ((val / 10) % 10) + '0';
	buf[2] = (val % 10) + '0';

	for (int i = 0; i < 3; i++)
 4a8:	0f 5f       	subi	r16, 0xFF	; 255
 4aa:	1f 4f       	sbci	r17, 0xFF	; 255
 4ac:	03 30       	cpi	r16, 0x03	; 3
 4ae:	11 05       	cpc	r17, r1
 4b0:	8c f3       	brlt	.-30     	; 0x494 <lcd_update_digit+0x80>
	lcd_send_byte(buf[i], 1);

	lcd_send_byte(selecionado ? '*' : ' ', 1);
 4b2:	ff 20       	and	r15, r15
 4b4:	11 f0       	breq	.+4      	; 0x4ba <lcd_update_digit+0xa6>
 4b6:	8a e2       	ldi	r24, 0x2A	; 42
 4b8:	01 c0       	rjmp	.+2      	; 0x4bc <lcd_update_digit+0xa8>
 4ba:	80 e2       	ldi	r24, 0x20	; 32
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_byte>
}
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	ff 90       	pop	r15
 4d2:	08 95       	ret

000004d4 <lcd_update_partial>:

void lcd_update_partial(void)
{
	if (old_red != red_val || old_seletor != seletor)
 4d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <old_red>
 4d8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <red_val>
 4dc:	98 13       	cpse	r25, r24
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <lcd_update_partial+0x18>
 4e0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4e4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 4e8:	98 17       	cp	r25, r24
 4ea:	71 f0       	breq	.+28     	; 0x508 <lcd_update_partial+0x34>
	{
		lcd_update_digit(0, red_val, (seletor == 0));
 4ec:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 4f0:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <red_val>
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	81 11       	cpse	r24, r1
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_update_digit>
		old_red = red_val;
 500:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <red_val>
 504:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <old_red>
	}
	if (old_green != green_val || old_seletor != seletor)
 508:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <old_green>
 50c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <green_val>
 510:	98 13       	cpse	r25, r24
 512:	06 c0       	rjmp	.+12     	; 0x520 <lcd_update_partial+0x4c>
 514:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 518:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 51c:	98 17       	cp	r25, r24
 51e:	79 f0       	breq	.+30     	; 0x53e <lcd_update_partial+0x6a>
	{
		lcd_update_digit(1, green_val, (seletor == 1));
 520:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 524:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <green_val>
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	09 f0       	breq	.+2      	; 0x530 <lcd_update_partial+0x5c>
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_update_digit>
		old_green = green_val;
 536:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <green_val>
 53a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <old_green>
	}
	if (old_blue != blue_val || old_seletor != seletor)
 53e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <old_blue>
 542:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <blue_val>
 546:	98 13       	cpse	r25, r24
 548:	06 c0       	rjmp	.+12     	; 0x556 <lcd_update_partial+0x82>
 54a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 54e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 552:	98 17       	cp	r25, r24
 554:	79 f0       	breq	.+30     	; 0x574 <lcd_update_partial+0xa0>
	{
		lcd_update_digit(2, blue_val, (seletor == 2));
 556:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 55a:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <blue_val>
 55e:	41 e0       	ldi	r20, 0x01	; 1
 560:	82 30       	cpi	r24, 0x02	; 2
 562:	09 f0       	breq	.+2      	; 0x566 <lcd_update_partial+0x92>
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_update_digit>
		old_blue = blue_val;
 56c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <blue_val>
 570:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <old_blue>
	}
	old_seletor = seletor;
 574:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 578:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 57c:	08 95       	ret

0000057e <main>:
}

int main(void)
{
	buttons_init();
 57e:	0e 94 07 01 	call	0x20e	; 0x20e <buttons_init>
	lcd_init();
 582:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_init>

	lcd_clear();
 586:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_clear>
	lcd_goto(0, 0);
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_goto>
	lcd_print("RED  GREEN BLUE");
 592:	84 e0       	ldi	r24, 0x04	; 4
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_print>

	old_red = 255;
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <old_red>
	old_green = 255;
 5a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <old_green>
	old_blue = 255;
 5a4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <old_blue>
	old_seletor = -2;
 5a8:	8e ef       	ldi	r24, 0xFE	; 254
 5aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	lcd_update_partial();
 5ae:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_update_partial>

	btn_inc.pressed = false;
 5b2:	ac e2       	ldi	r26, 0x2C	; 44
 5b4:	b1 e0       	ldi	r27, 0x01	; 1
 5b6:	1c 92       	st	X, r1
	btn_dec.pressed = false;
 5b8:	e2 e2       	ldi	r30, 0x22	; 34
 5ba:	f1 e0       	ldi	r31, 0x01	; 1
 5bc:	10 82       	st	Z, r1
	btn_inc.auto_repeat_active = false;
 5be:	19 96       	adiw	r26, 0x09	; 9
 5c0:	1c 92       	st	X, r1
	btn_dec.auto_repeat_active = false;
 5c2:	11 86       	std	Z+9, r1	; 0x09

	while (1)
	{
		delay_ms_tick();
 5c4:	0e 94 31 01 	call	0x262	; 0x262 <delay_ms_tick>

		btn_update(&btn_inc, BTN_S2);
 5c8:	62 e0       	ldi	r22, 0x02	; 2
 5ca:	8c e2       	ldi	r24, 0x2C	; 44
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	0e 94 4b 01 	call	0x296	; 0x296 <btn_update>
		btn_update(&btn_dec, BTN_S3);
 5d2:	63 e0       	ldi	r22, 0x03	; 3
 5d4:	82 e2       	ldi	r24, 0x22	; 34
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	0e 94 4b 01 	call	0x296	; 0x296 <btn_update>

		if (button_pressed(BTN_S1))
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 0e 01 	call	0x21c	; 0x21c <button_pressed>
 5e2:	88 23       	and	r24, r24
 5e4:	29 f1       	breq	.+74     	; 0x630 <main+0xb2>
 5e6:	2f ef       	ldi	r18, 0xFF	; 255
 5e8:	81 ee       	ldi	r24, 0xE1	; 225
 5ea:	94 e0       	ldi	r25, 0x04	; 4
 5ec:	21 50       	subi	r18, 0x01	; 1
 5ee:	80 40       	sbci	r24, 0x00	; 0
 5f0:	90 40       	sbci	r25, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <main+0x6e>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <main+0x78>
 5f6:	00 00       	nop
		{
			_delay_ms(100);

			seletor++;
 5f8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 5fc:	8f 5f       	subi	r24, 0xFF	; 255
 5fe:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <seletor>
			if (seletor > 3)
 602:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 606:	84 30       	cpi	r24, 0x04	; 4
 608:	14 f0       	brlt	.+4      	; 0x60e <main+0x90>
			seletor = 0;
 60a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <seletor>
			if (seletor == 3)
 60e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	19 f4       	brne	.+6      	; 0x61c <main+0x9e>
			seletor = -1;
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <seletor>

			lcd_update_partial();
 61c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_update_partial>

			while (button_pressed(BTN_S1))
 620:	02 c0       	rjmp	.+4      	; 0x626 <main+0xa8>
			delay_ms_tick();
 622:	0e 94 31 01 	call	0x262	; 0x262 <delay_ms_tick>
			if (seletor == 3)
			seletor = -1;

			lcd_update_partial();

			while (button_pressed(BTN_S1))
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 0e 01 	call	0x21c	; 0x21c <button_pressed>
 62c:	81 11       	cpse	r24, r1
 62e:	f9 cf       	rjmp	.-14     	; 0x622 <main+0xa4>
			delay_ms_tick();
		}

		if (seletor != -1 && btn_should_act(&btn_inc, BTN_S2))
 630:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 634:	8f 3f       	cpi	r24, 0xFF	; 255
 636:	71 f1       	breq	.+92     	; 0x694 <main+0x116>
 638:	62 e0       	ldi	r22, 0x02	; 2
 63a:	8c e2       	ldi	r24, 0x2C	; 44
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	0e 94 cf 01 	call	0x39e	; 0x39e <btn_should_act>
 642:	88 23       	and	r24, r24
 644:	39 f1       	breq	.+78     	; 0x694 <main+0x116>
		{
			switch (seletor)
 646:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 64a:	81 30       	cpi	r24, 0x01	; 1
 64c:	71 f0       	breq	.+28     	; 0x66a <main+0xec>
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	b1 f0       	breq	.+44     	; 0x67e <main+0x100>
 652:	81 11       	cpse	r24, r1
 654:	1d c0       	rjmp	.+58     	; 0x690 <main+0x112>
			{
				case 0:
				if (red_val < 255)
 656:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <red_val>
 65a:	8f 3f       	cpi	r24, 0xFF	; 255
 65c:	c9 f0       	breq	.+50     	; 0x690 <main+0x112>
				red_val++;
 65e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <red_val>
 662:	8f 5f       	subi	r24, 0xFF	; 255
 664:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <red_val>
 668:	13 c0       	rjmp	.+38     	; 0x690 <main+0x112>
				break;
				case 1:
				if (green_val < 255)
 66a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <green_val>
 66e:	8f 3f       	cpi	r24, 0xFF	; 255
 670:	79 f0       	breq	.+30     	; 0x690 <main+0x112>
				green_val++;
 672:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <green_val>
 676:	8f 5f       	subi	r24, 0xFF	; 255
 678:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <green_val>
 67c:	09 c0       	rjmp	.+18     	; 0x690 <main+0x112>
				break;
				case 2:
				if (blue_val < 255)
 67e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <blue_val>
 682:	8f 3f       	cpi	r24, 0xFF	; 255
 684:	29 f0       	breq	.+10     	; 0x690 <main+0x112>
				blue_val++;
 686:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <blue_val>
 68a:	8f 5f       	subi	r24, 0xFF	; 255
 68c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <blue_val>
				break;
			}
			lcd_update_partial();
 690:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_update_partial>
		}

		if (seletor != -1 && btn_should_act(&btn_dec, BTN_S3))
 694:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 698:	8f 3f       	cpi	r24, 0xFF	; 255
 69a:	09 f4       	brne	.+2      	; 0x69e <main+0x120>
 69c:	93 cf       	rjmp	.-218    	; 0x5c4 <main+0x46>
 69e:	63 e0       	ldi	r22, 0x03	; 3
 6a0:	82 e2       	ldi	r24, 0x22	; 34
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	0e 94 cf 01 	call	0x39e	; 0x39e <btn_should_act>
 6a8:	88 23       	and	r24, r24
 6aa:	09 f4       	brne	.+2      	; 0x6ae <main+0x130>
 6ac:	8b cf       	rjmp	.-234    	; 0x5c4 <main+0x46>
		{
			switch (seletor)
 6ae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <seletor>
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	71 f0       	breq	.+28     	; 0x6d2 <main+0x154>
 6b6:	82 30       	cpi	r24, 0x02	; 2
 6b8:	b1 f0       	breq	.+44     	; 0x6e6 <main+0x168>
 6ba:	81 11       	cpse	r24, r1
 6bc:	1d c0       	rjmp	.+58     	; 0x6f8 <main+0x17a>
			{
				case 0:
				if (red_val > 0)
 6be:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <red_val>
 6c2:	88 23       	and	r24, r24
 6c4:	c9 f0       	breq	.+50     	; 0x6f8 <main+0x17a>
				red_val--;
 6c6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <red_val>
 6ca:	81 50       	subi	r24, 0x01	; 1
 6cc:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <red_val>
 6d0:	13 c0       	rjmp	.+38     	; 0x6f8 <main+0x17a>
				break;
				case 1:
				if (green_val > 0)
 6d2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <green_val>
 6d6:	88 23       	and	r24, r24
 6d8:	79 f0       	breq	.+30     	; 0x6f8 <main+0x17a>
				green_val--;
 6da:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <green_val>
 6de:	81 50       	subi	r24, 0x01	; 1
 6e0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <green_val>
 6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <main+0x17a>
				break;
				case 2:
				if (blue_val > 0)
 6e6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <blue_val>
 6ea:	88 23       	and	r24, r24
 6ec:	29 f0       	breq	.+10     	; 0x6f8 <main+0x17a>
				blue_val--;
 6ee:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <blue_val>
 6f2:	81 50       	subi	r24, 0x01	; 1
 6f4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <blue_val>
				break;
			}
			lcd_update_partial();
 6f8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_update_partial>
 6fc:	63 cf       	rjmp	.-314    	; 0x5c4 <main+0x46>

000006fe <_exit>:
 6fe:	f8 94       	cli

00000700 <__stop_program>:
 700:	ff cf       	rjmp	.-2      	; 0x700 <__stop_program>

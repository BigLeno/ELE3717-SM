
atv04_3717_251.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000ee8  00000f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080011a  0080011a  00000f96  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eae  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000825  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000920  00000000  00000000  00002797  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f8  00000000  00000000  0000329c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000068d  00000000  00000000  00003794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003e21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 35 04 	call	0x86a	; 0x86a <main>
  9e:	0c 94 72 07 	jmp	0xee4	; 0xee4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_strobe>:
/*================================================================
  Funções básicas do LCD 2×16 em 4-bit
  ================================================================*/
static void lcd_strobe(void)
{
    PORTC |=  (1<<LCD_EN);
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_strobe+0x8>
  b2:	00 00       	nop
    _delay_us(1);
    PORTC &= ~(1<<LCD_EN);
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	8b 7f       	andi	r24, 0xFB	; 251
  b8:	88 b9       	out	0x08, r24	; 8
  ba:	8f e8       	ldi	r24, 0x8F	; 143
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_strobe+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_strobe+0x1e>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <lcd_write_nibble>:
}

/* envia meio byte */
static void lcd_write_nibble(uint8_t nib)
{
    if (nib & 0x08) PORTC |=  (1<<LCD_D7); else PORTC &= ~(1<<LCD_D7);
  c8:	83 ff       	sbrs	r24, 3
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <lcd_write_nibble+0xc>
  cc:	98 b1       	in	r25, 0x08	; 8
  ce:	90 64       	ori	r25, 0x40	; 64
  d0:	98 b9       	out	0x08, r25	; 8
  d2:	03 c0       	rjmp	.+6      	; 0xda <lcd_write_nibble+0x12>
  d4:	98 b1       	in	r25, 0x08	; 8
  d6:	9f 7b       	andi	r25, 0xBF	; 191
  d8:	98 b9       	out	0x08, r25	; 8
    if (nib & 0x04) PORTC |=  (1<<LCD_D6); else PORTC &= ~(1<<LCD_D6);
  da:	82 ff       	sbrs	r24, 2
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <lcd_write_nibble+0x1e>
  de:	98 b1       	in	r25, 0x08	; 8
  e0:	90 62       	ori	r25, 0x20	; 32
  e2:	98 b9       	out	0x08, r25	; 8
  e4:	03 c0       	rjmp	.+6      	; 0xec <lcd_write_nibble+0x24>
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	9f 7d       	andi	r25, 0xDF	; 223
  ea:	98 b9       	out	0x08, r25	; 8
    if (nib & 0x02) PORTC |=  (1<<LCD_D5); else PORTC &= ~(1<<LCD_D5);
  ec:	81 ff       	sbrs	r24, 1
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <lcd_write_nibble+0x30>
  f0:	98 b1       	in	r25, 0x08	; 8
  f2:	90 61       	ori	r25, 0x10	; 16
  f4:	98 b9       	out	0x08, r25	; 8
  f6:	03 c0       	rjmp	.+6      	; 0xfe <lcd_write_nibble+0x36>
  f8:	98 b1       	in	r25, 0x08	; 8
  fa:	9f 7e       	andi	r25, 0xEF	; 239
  fc:	98 b9       	out	0x08, r25	; 8
    if (nib & 0x01) PORTC |=  (1<<LCD_D4); else PORTC &= ~(1<<LCD_D4);
  fe:	80 ff       	sbrs	r24, 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <lcd_write_nibble+0x42>
 102:	88 b1       	in	r24, 0x08	; 8
 104:	88 60       	ori	r24, 0x08	; 8
 106:	88 b9       	out	0x08, r24	; 8
 108:	03 c0       	rjmp	.+6      	; 0x110 <lcd_write_nibble+0x48>
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	88 b9       	out	0x08, r24	; 8
    lcd_strobe();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_strobe>
 114:	08 95       	ret

00000116 <pwm_update>:
}

/* atualiza valores PWM */
void pwm_update(void)
{
    OCR0A = red_val;
 116:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red_val>
 11a:	87 bd       	out	0x27, r24	; 39
    OCR1AL= grn_val;
 11c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <grn_val>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    OCR2A = blu_val;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 12c:	08 95       	ret

0000012e <__vector_11>:
  ---------------------------------------------------------------
  - Incrementa systick_ms
  - Tratamento de auto-repeat de ?/?
  ================================================================*/
ISR(TIMER1_COMPA_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
    systick_ms++;
 150:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <systick_ms>
 154:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <systick_ms+0x1>
 158:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <systick_ms+0x2>
 15c:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <systick_ms+0x3>
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	a1 1d       	adc	r26, r1
 164:	b1 1d       	adc	r27, r1
 166:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <systick_ms>
 16a:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <systick_ms+0x1>
 16e:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <systick_ms+0x2>
 172:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <systick_ms+0x3>
    // ?
    if (btnUP.pressed) {
 176:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <btnUP>
 17a:	88 23       	and	r24, r24
 17c:	09 f4       	brne	.+2      	; 0x180 <__vector_11+0x52>
 17e:	63 c0       	rjmp	.+198    	; 0x246 <__vector_11+0x118>
        btnUP.hold_time++;
 180:	e6 e2       	ldi	r30, 0x26	; 38
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	85 81       	ldd	r24, Z+5	; 0x05
 186:	96 81       	ldd	r25, Z+6	; 0x06
 188:	a7 81       	ldd	r26, Z+7	; 0x07
 18a:	b0 85       	ldd	r27, Z+8	; 0x08
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	85 83       	std	Z+5, r24	; 0x05
 194:	96 83       	std	Z+6, r25	; 0x06
 196:	a7 83       	std	Z+7, r26	; 0x07
 198:	b0 87       	std	Z+8, r27	; 0x08
        if (btnUP.hold_time >= HOLD_THR1) {
 19a:	85 81       	ldd	r24, Z+5	; 0x05
 19c:	96 81       	ldd	r25, Z+6	; 0x06
 19e:	a7 81       	ldd	r26, Z+7	; 0x07
 1a0:	b0 85       	ldd	r27, Z+8	; 0x08
 1a2:	88 38       	cpi	r24, 0x88	; 136
 1a4:	93 41       	sbci	r25, 0x13	; 19
 1a6:	a1 05       	cpc	r26, r1
 1a8:	b1 05       	cpc	r27, r1
 1aa:	08 f4       	brcc	.+2      	; 0x1ae <__vector_11+0x80>
 1ac:	4c c0       	rjmp	.+152    	; 0x246 <__vector_11+0x118>
            btnUP.autorep = true;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	81 87       	std	Z+9, r24	; 0x09
            btnUP.rpt_cnt++;
 1b2:	82 85       	ldd	r24, Z+10	; 0x0a
 1b4:	93 85       	ldd	r25, Z+11	; 0x0b
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	93 87       	std	Z+11, r25	; 0x0b
 1ba:	82 87       	std	Z+10, r24	; 0x0a
            uint16_t thr = (btnUP.hold_time < HOLD_THR2 ? REP_INT1 : REP_INT2);
 1bc:	85 81       	ldd	r24, Z+5	; 0x05
 1be:	96 81       	ldd	r25, Z+6	; 0x06
 1c0:	a7 81       	ldd	r26, Z+7	; 0x07
 1c2:	b0 85       	ldd	r27, Z+8	; 0x08
 1c4:	80 31       	cpi	r24, 0x10	; 16
 1c6:	97 42       	sbci	r25, 0x27	; 39
 1c8:	a1 05       	cpc	r26, r1
 1ca:	b1 05       	cpc	r27, r1
 1cc:	18 f4       	brcc	.+6      	; 0x1d4 <__vector_11+0xa6>
 1ce:	24 ef       	ldi	r18, 0xF4	; 244
 1d0:	31 e0       	ldi	r19, 0x01	; 1
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__vector_11+0xaa>
 1d4:	24 e6       	ldi	r18, 0x64	; 100
 1d6:	30 e0       	ldi	r19, 0x00	; 0
            if (btnUP.rpt_cnt >= thr) {
 1d8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <btnUP+0xa>
 1dc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <btnUP+0xb>
 1e0:	82 17       	cp	r24, r18
 1e2:	93 07       	cpc	r25, r19
 1e4:	80 f1       	brcs	.+96     	; 0x246 <__vector_11+0x118>
                btnUP.rpt_cnt = 0;
 1e6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <btnUP+0xb>
 1ea:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <btnUP+0xa>
                // dispara incremento
                if (channel==0 && red_val<255)   red_val++;
 1ee:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 1f2:	81 11       	cpse	r24, r1
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <__vector_11+0xda>
 1f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red_val>
 1fa:	8f 3f       	cpi	r24, 0xFF	; 255
 1fc:	29 f0       	breq	.+10     	; 0x208 <__vector_11+0xda>
 1fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red_val>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <red_val>
                if (channel==1 && grn_val<255)   grn_val++;
 208:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	49 f4       	brne	.+18     	; 0x222 <__vector_11+0xf4>
 210:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <grn_val>
 214:	8f 3f       	cpi	r24, 0xFF	; 255
 216:	29 f0       	breq	.+10     	; 0x222 <__vector_11+0xf4>
 218:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <grn_val>
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <grn_val>
                if (channel==2 && blu_val<255)   blu_val++;
 222:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	49 f4       	brne	.+18     	; 0x23c <__vector_11+0x10e>
 22a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22e:	8f 3f       	cpi	r24, 0xFF	; 255
 230:	29 f0       	breq	.+10     	; 0x23c <__vector_11+0x10e>
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                pwm_update();
 23c:	0e 94 8b 00 	call	0x116	; 0x116 <pwm_update>
                lcd_update = true;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <lcd_update>
            }
        }
    }
    // ?
    if (btnDN.pressed) {
 246:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 24a:	88 23       	and	r24, r24
 24c:	09 f4       	brne	.+2      	; 0x250 <__vector_11+0x122>
 24e:	63 c0       	rjmp	.+198    	; 0x316 <__vector_11+0x1e8>
        btnDN.hold_time++;
 250:	ea e1       	ldi	r30, 0x1A	; 26
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	85 81       	ldd	r24, Z+5	; 0x05
 256:	96 81       	ldd	r25, Z+6	; 0x06
 258:	a7 81       	ldd	r26, Z+7	; 0x07
 25a:	b0 85       	ldd	r27, Z+8	; 0x08
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	a1 1d       	adc	r26, r1
 260:	b1 1d       	adc	r27, r1
 262:	85 83       	std	Z+5, r24	; 0x05
 264:	96 83       	std	Z+6, r25	; 0x06
 266:	a7 83       	std	Z+7, r26	; 0x07
 268:	b0 87       	std	Z+8, r27	; 0x08
        if (btnDN.hold_time >= HOLD_THR1) {
 26a:	85 81       	ldd	r24, Z+5	; 0x05
 26c:	96 81       	ldd	r25, Z+6	; 0x06
 26e:	a7 81       	ldd	r26, Z+7	; 0x07
 270:	b0 85       	ldd	r27, Z+8	; 0x08
 272:	88 38       	cpi	r24, 0x88	; 136
 274:	93 41       	sbci	r25, 0x13	; 19
 276:	a1 05       	cpc	r26, r1
 278:	b1 05       	cpc	r27, r1
 27a:	08 f4       	brcc	.+2      	; 0x27e <__vector_11+0x150>
 27c:	4c c0       	rjmp	.+152    	; 0x316 <__vector_11+0x1e8>
            btnDN.autorep = true;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	81 87       	std	Z+9, r24	; 0x09
            btnDN.rpt_cnt++;
 282:	82 85       	ldd	r24, Z+10	; 0x0a
 284:	93 85       	ldd	r25, Z+11	; 0x0b
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	93 87       	std	Z+11, r25	; 0x0b
 28a:	82 87       	std	Z+10, r24	; 0x0a
            uint16_t thr = (btnDN.hold_time < HOLD_THR2 ? REP_INT1 : REP_INT2);
 28c:	85 81       	ldd	r24, Z+5	; 0x05
 28e:	96 81       	ldd	r25, Z+6	; 0x06
 290:	a7 81       	ldd	r26, Z+7	; 0x07
 292:	b0 85       	ldd	r27, Z+8	; 0x08
 294:	80 31       	cpi	r24, 0x10	; 16
 296:	97 42       	sbci	r25, 0x27	; 39
 298:	a1 05       	cpc	r26, r1
 29a:	b1 05       	cpc	r27, r1
 29c:	18 f4       	brcc	.+6      	; 0x2a4 <__vector_11+0x176>
 29e:	24 ef       	ldi	r18, 0xF4	; 244
 2a0:	31 e0       	ldi	r19, 0x01	; 1
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__vector_11+0x17a>
 2a4:	24 e6       	ldi	r18, 0x64	; 100
 2a6:	30 e0       	ldi	r19, 0x00	; 0
            if (btnDN.rpt_cnt >= thr) {
 2a8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end+0xa>
 2ac:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0xb>
 2b0:	82 17       	cp	r24, r18
 2b2:	93 07       	cpc	r25, r19
 2b4:	80 f1       	brcs	.+96     	; 0x316 <__vector_11+0x1e8>
                btnDN.rpt_cnt = 0;
 2b6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__data_end+0xb>
 2ba:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end+0xa>
                // dispara decremento
                if (channel==0 && red_val>0)   red_val--;
 2be:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 2c2:	81 11       	cpse	r24, r1
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <__vector_11+0x1aa>
 2c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red_val>
 2ca:	88 23       	and	r24, r24
 2cc:	29 f0       	breq	.+10     	; 0x2d8 <__vector_11+0x1aa>
 2ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red_val>
 2d2:	81 50       	subi	r24, 0x01	; 1
 2d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <red_val>
                if (channel==1 && grn_val>0)   grn_val--;
 2d8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	49 f4       	brne	.+18     	; 0x2f2 <__vector_11+0x1c4>
 2e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <grn_val>
 2e4:	88 23       	and	r24, r24
 2e6:	29 f0       	breq	.+10     	; 0x2f2 <__vector_11+0x1c4>
 2e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <grn_val>
 2ec:	81 50       	subi	r24, 0x01	; 1
 2ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <grn_val>
                if (channel==2 && blu_val>0)   blu_val--;
 2f2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	49 f4       	brne	.+18     	; 0x30c <__vector_11+0x1de>
 2fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fe:	88 23       	and	r24, r24
 300:	29 f0       	breq	.+10     	; 0x30c <__vector_11+0x1de>
 302:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 306:	81 50       	subi	r24, 0x01	; 1
 308:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                pwm_update();
 30c:	0e 94 8b 00 	call	0x116	; 0x116 <pwm_update>
                lcd_update = true;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <lcd_update>
            }
        }
    }
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_5>:
  - Detecta bordas em M, ?, ?
  - Debounce via software (ignora eventos em <DEBOUNCE_MS)
  - Nó: botões são ativos-baixo (pull-up interna)
  ================================================================*/
ISR(PCINT2_vect)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	cf 92       	push	r12
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	cf 93       	push	r28
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
    uint8_t pd = PIND;
 364:	c9 b1       	in	r28, 0x09	; 9
    uint32_t t = systick_ms;
 366:	c0 90 3e 01 	lds	r12, 0x013E	; 0x80013e <systick_ms>
 36a:	d0 90 3f 01 	lds	r13, 0x013F	; 0x80013f <systick_ms+0x1>
 36e:	e0 90 40 01 	lds	r14, 0x0140	; 0x800140 <systick_ms+0x2>
 372:	f0 90 41 01 	lds	r15, 0x0141	; 0x800141 <systick_ms+0x3>

    // --- botão M (PD2) ---
    if (!(pd & (1<<BTN_M))) {
 376:	c2 fd       	sbrc	r28, 2
 378:	2c c0       	rjmp	.+88     	; 0x3d2 <__vector_5+0x9a>
        // detecta pressão
        if (!btnM.pressed && (t - btnM.last_evt) >= DEBOUNCE_MS) {
 37a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <btnM>
 37e:	81 11       	cpse	r24, r1
 380:	46 c0       	rjmp	.+140    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 382:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <btnM+0x1>
 386:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <btnM+0x2>
 38a:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <btnM+0x3>
 38e:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <btnM+0x4>
 392:	a7 01       	movw	r20, r14
 394:	96 01       	movw	r18, r12
 396:	28 1b       	sub	r18, r24
 398:	39 0b       	sbc	r19, r25
 39a:	4a 0b       	sbc	r20, r26
 39c:	5b 0b       	sbc	r21, r27
 39e:	22 33       	cpi	r18, 0x32	; 50
 3a0:	31 05       	cpc	r19, r1
 3a2:	41 05       	cpc	r20, r1
 3a4:	51 05       	cpc	r21, r1
 3a6:	98 f1       	brcs	.+102    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
            btnM.pressed    = true;
 3a8:	e2 e3       	ldi	r30, 0x32	; 50
 3aa:	f1 e0       	ldi	r31, 0x01	; 1
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	20 83       	st	Z, r18
            btnM.last_evt   = t;
 3b0:	c1 82       	std	Z+1, r12	; 0x01
 3b2:	d2 82       	std	Z+2, r13	; 0x02
 3b4:	e3 82       	std	Z+3, r14	; 0x03
 3b6:	f4 82       	std	Z+4, r15	; 0x04
            // avança canal
            channel = (channel+1) % 3;
 3b8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	63 e0       	ldi	r22, 0x03	; 3
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__divmodhi4>
 3c8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <channel>
            lcd_update = true;
 3cc:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <lcd_update>
 3d0:	1e c0       	rjmp	.+60     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
        }
    } else {
        // detecta liberação
        if (btnM.pressed && (t - btnM.last_evt) >= DEBOUNCE_MS) {
 3d2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <btnM>
 3d6:	88 23       	and	r24, r24
 3d8:	d1 f0       	breq	.+52     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3da:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <btnM+0x1>
 3de:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <btnM+0x2>
 3e2:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <btnM+0x3>
 3e6:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <btnM+0x4>
 3ea:	a7 01       	movw	r20, r14
 3ec:	96 01       	movw	r18, r12
 3ee:	28 1b       	sub	r18, r24
 3f0:	39 0b       	sbc	r19, r25
 3f2:	4a 0b       	sbc	r20, r26
 3f4:	5b 0b       	sbc	r21, r27
 3f6:	22 33       	cpi	r18, 0x32	; 50
 3f8:	31 05       	cpc	r19, r1
 3fa:	41 05       	cpc	r20, r1
 3fc:	51 05       	cpc	r21, r1
 3fe:	38 f0       	brcs	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
            btnM.pressed  = false;
 400:	e2 e3       	ldi	r30, 0x32	; 50
 402:	f1 e0       	ldi	r31, 0x01	; 1
 404:	10 82       	st	Z, r1
            btnM.last_evt = t;
 406:	c1 82       	std	Z+1, r12	; 0x01
 408:	d2 82       	std	Z+2, r13	; 0x02
 40a:	e3 82       	std	Z+3, r14	; 0x03
 40c:	f4 82       	std	Z+4, r15	; 0x04
        }
    }

    // --- botão ? (PD3) ---
    if (!(pd & (1<<BTN_UP))) {
 40e:	c3 fd       	sbrc	r28, 3
 410:	54 c0       	rjmp	.+168    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
        if (!btnUP.pressed && (t - btnUP.last_evt) >= DEBOUNCE_MS) {
 412:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <btnUP>
 416:	81 11       	cpse	r24, r1
 418:	75 c0       	rjmp	.+234    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 41a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <btnUP+0x1>
 41e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <btnUP+0x2>
 422:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <btnUP+0x3>
 426:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <btnUP+0x4>
 42a:	a7 01       	movw	r20, r14
 42c:	96 01       	movw	r18, r12
 42e:	28 1b       	sub	r18, r24
 430:	39 0b       	sbc	r19, r25
 432:	4a 0b       	sbc	r20, r26
 434:	5b 0b       	sbc	r21, r27
 436:	22 33       	cpi	r18, 0x32	; 50
 438:	31 05       	cpc	r19, r1
 43a:	41 05       	cpc	r20, r1
 43c:	51 05       	cpc	r21, r1
 43e:	08 f4       	brcc	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	61 c0       	rjmp	.+194    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
            btnUP.pressed    = true;
 442:	e6 e2       	ldi	r30, 0x26	; 38
 444:	f1 e0       	ldi	r31, 0x01	; 1
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	80 83       	st	Z, r24
            btnUP.last_evt   = t;
 44a:	c1 82       	std	Z+1, r12	; 0x01
 44c:	d2 82       	std	Z+2, r13	; 0x02
 44e:	e3 82       	std	Z+3, r14	; 0x03
 450:	f4 82       	std	Z+4, r15	; 0x04
            btnUP.hold_time  = 0;
 452:	15 82       	std	Z+5, r1	; 0x05
 454:	16 82       	std	Z+6, r1	; 0x06
 456:	17 82       	std	Z+7, r1	; 0x07
 458:	10 86       	std	Z+8, r1	; 0x08
            btnUP.autorep    = false;
 45a:	11 86       	std	Z+9, r1	; 0x09
            btnUP.rpt_cnt    = 0;
 45c:	13 86       	std	Z+11, r1	; 0x0b
 45e:	12 86       	std	Z+10, r1	; 0x0a
            // primeiro incremento imediato
            if (channel==0 && red_val<255)   red_val++;
 460:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 464:	81 11       	cpse	r24, r1
 466:	09 c0       	rjmp	.+18     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 468:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red_val>
 46c:	8f 3f       	cpi	r24, 0xFF	; 255
 46e:	29 f0       	breq	.+10     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 470:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red_val>
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <red_val>
            if (channel==1 && grn_val<255)   grn_val++;
 47a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	49 f4       	brne	.+18     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 482:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <grn_val>
 486:	8f 3f       	cpi	r24, 0xFF	; 255
 488:	29 f0       	breq	.+10     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 48a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <grn_val>
 48e:	8f 5f       	subi	r24, 0xFF	; 255
 490:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <grn_val>
            if (channel==2 && blu_val<255)   blu_val++;
 494:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	49 f4       	brne	.+18     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 49c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4a0:	8f 3f       	cpi	r24, 0xFF	; 255
 4a2:	29 f0       	breq	.+10     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4a8:	8f 5f       	subi	r24, 0xFF	; 255
 4aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            pwm_update();
 4ae:	0e 94 8b 00 	call	0x116	; 0x116 <pwm_update>
            lcd_update = true;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <lcd_update>
 4b8:	25 c0       	rjmp	.+74     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
        }
    } else {
        if (btnUP.pressed && (t - btnUP.last_evt) >= DEBOUNCE_MS) {
 4ba:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <btnUP>
 4be:	88 23       	and	r24, r24
 4c0:	09 f1       	breq	.+66     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 4c2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <btnUP+0x1>
 4c6:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <btnUP+0x2>
 4ca:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <btnUP+0x3>
 4ce:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <btnUP+0x4>
 4d2:	a7 01       	movw	r20, r14
 4d4:	96 01       	movw	r18, r12
 4d6:	28 1b       	sub	r18, r24
 4d8:	39 0b       	sbc	r19, r25
 4da:	4a 0b       	sbc	r20, r26
 4dc:	5b 0b       	sbc	r21, r27
 4de:	22 33       	cpi	r18, 0x32	; 50
 4e0:	31 05       	cpc	r19, r1
 4e2:	41 05       	cpc	r20, r1
 4e4:	51 05       	cpc	r21, r1
 4e6:	70 f0       	brcs	.+28     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
            btnUP.pressed    = false;
 4e8:	e6 e2       	ldi	r30, 0x26	; 38
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	10 82       	st	Z, r1
            btnUP.last_evt   = t;
 4ee:	c1 82       	std	Z+1, r12	; 0x01
 4f0:	d2 82       	std	Z+2, r13	; 0x02
 4f2:	e3 82       	std	Z+3, r14	; 0x03
 4f4:	f4 82       	std	Z+4, r15	; 0x04
            btnUP.hold_time  = 0;
 4f6:	15 82       	std	Z+5, r1	; 0x05
 4f8:	16 82       	std	Z+6, r1	; 0x06
 4fa:	17 82       	std	Z+7, r1	; 0x07
 4fc:	10 86       	std	Z+8, r1	; 0x08
            btnUP.autorep    = false;
 4fe:	11 86       	std	Z+9, r1	; 0x09
            btnUP.rpt_cnt    = 0;
 500:	13 86       	std	Z+11, r1	; 0x0b
 502:	12 86       	std	Z+10, r1	; 0x0a
        }
    }

    // --- botão ? (PD4) ---
    if (!(pd & (1<<BTN_DOWN))) {
 504:	c4 fd       	sbrc	r28, 4
 506:	54 c0       	rjmp	.+168    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
        if (!btnDN.pressed && (t - btnDN.last_evt) >= DEBOUNCE_MS) {
 508:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 50c:	81 11       	cpse	r24, r1
 50e:	75 c0       	rjmp	.+234    	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
 510:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <__data_end+0x1>
 514:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <__data_end+0x2>
 518:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <__data_end+0x3>
 51c:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <__data_end+0x4>
 520:	a7 01       	movw	r20, r14
 522:	96 01       	movw	r18, r12
 524:	28 1b       	sub	r18, r24
 526:	39 0b       	sbc	r19, r25
 528:	4a 0b       	sbc	r20, r26
 52a:	5b 0b       	sbc	r21, r27
 52c:	22 33       	cpi	r18, 0x32	; 50
 52e:	31 05       	cpc	r19, r1
 530:	41 05       	cpc	r20, r1
 532:	51 05       	cpc	r21, r1
 534:	08 f4       	brcc	.+2      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 536:	61 c0       	rjmp	.+194    	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
            btnDN.pressed    = true;
 538:	ea e1       	ldi	r30, 0x1A	; 26
 53a:	f1 e0       	ldi	r31, 0x01	; 1
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	80 83       	st	Z, r24
            btnDN.last_evt   = t;
 540:	c1 82       	std	Z+1, r12	; 0x01
 542:	d2 82       	std	Z+2, r13	; 0x02
 544:	e3 82       	std	Z+3, r14	; 0x03
 546:	f4 82       	std	Z+4, r15	; 0x04
            btnDN.hold_time  = 0;
 548:	15 82       	std	Z+5, r1	; 0x05
 54a:	16 82       	std	Z+6, r1	; 0x06
 54c:	17 82       	std	Z+7, r1	; 0x07
 54e:	10 86       	std	Z+8, r1	; 0x08
            btnDN.autorep    = false;
 550:	11 86       	std	Z+9, r1	; 0x09
            btnDN.rpt_cnt    = 0;
 552:	13 86       	std	Z+11, r1	; 0x0b
 554:	12 86       	std	Z+10, r1	; 0x0a
            // primeiro decremento imediato
            if (channel==0 && red_val>0)   red_val--;
 556:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 55a:	81 11       	cpse	r24, r1
 55c:	09 c0       	rjmp	.+18     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 55e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red_val>
 562:	88 23       	and	r24, r24
 564:	29 f0       	breq	.+10     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 566:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red_val>
 56a:	81 50       	subi	r24, 0x01	; 1
 56c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <red_val>
            if (channel==1 && grn_val>0)   grn_val--;
 570:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	49 f4       	brne	.+18     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 578:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <grn_val>
 57c:	88 23       	and	r24, r24
 57e:	29 f0       	breq	.+10     	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 580:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <grn_val>
 584:	81 50       	subi	r24, 0x01	; 1
 586:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <grn_val>
            if (channel==2 && blu_val>0)   blu_val--;
 58a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	49 f4       	brne	.+18     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 592:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 596:	88 23       	and	r24, r24
 598:	29 f0       	breq	.+10     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 59a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 59e:	81 50       	subi	r24, 0x01	; 1
 5a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            pwm_update();
 5a4:	0e 94 8b 00 	call	0x116	; 0x116 <pwm_update>
            lcd_update = true;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <lcd_update>
 5ae:	25 c0       	rjmp	.+74     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
        }
    } else {
        if (btnDN.pressed && (t - btnDN.last_evt) >= DEBOUNCE_MS) {
 5b0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 5b4:	88 23       	and	r24, r24
 5b6:	09 f1       	breq	.+66     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
 5b8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <__data_end+0x1>
 5bc:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <__data_end+0x2>
 5c0:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <__data_end+0x3>
 5c4:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <__data_end+0x4>
 5c8:	a7 01       	movw	r20, r14
 5ca:	96 01       	movw	r18, r12
 5cc:	28 1b       	sub	r18, r24
 5ce:	39 0b       	sbc	r19, r25
 5d0:	4a 0b       	sbc	r20, r26
 5d2:	5b 0b       	sbc	r21, r27
 5d4:	22 33       	cpi	r18, 0x32	; 50
 5d6:	31 05       	cpc	r19, r1
 5d8:	41 05       	cpc	r20, r1
 5da:	51 05       	cpc	r21, r1
 5dc:	70 f0       	brcs	.+28     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
            btnDN.pressed    = false;
 5de:	ea e1       	ldi	r30, 0x1A	; 26
 5e0:	f1 e0       	ldi	r31, 0x01	; 1
 5e2:	10 82       	st	Z, r1
            btnDN.last_evt   = t;
 5e4:	c1 82       	std	Z+1, r12	; 0x01
 5e6:	d2 82       	std	Z+2, r13	; 0x02
 5e8:	e3 82       	std	Z+3, r14	; 0x03
 5ea:	f4 82       	std	Z+4, r15	; 0x04
            btnDN.hold_time  = 0;
 5ec:	15 82       	std	Z+5, r1	; 0x05
 5ee:	16 82       	std	Z+6, r1	; 0x06
 5f0:	17 82       	std	Z+7, r1	; 0x07
 5f2:	10 86       	std	Z+8, r1	; 0x08
            btnDN.autorep    = false;
 5f4:	11 86       	std	Z+9, r1	; 0x09
            btnDN.rpt_cnt    = 0;
 5f6:	13 86       	std	Z+11, r1	; 0x0b
 5f8:	12 86       	std	Z+10, r1	; 0x0a
        }
    }
}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	cf 91       	pop	r28
 600:	bf 91       	pop	r27
 602:	af 91       	pop	r26
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	7f 91       	pop	r23
 60a:	6f 91       	pop	r22
 60c:	5f 91       	pop	r21
 60e:	4f 91       	pop	r20
 610:	3f 91       	pop	r19
 612:	2f 91       	pop	r18
 614:	ff 90       	pop	r15
 616:	ef 90       	pop	r14
 618:	df 90       	pop	r13
 61a:	cf 90       	pop	r12
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <pwm_init>:
  Inicialização de PWM nos timers 0,1,2
  ================================================================*/
void pwm_init(void)
{
    // Timer0 Fast PWM 8bit  RED  OC0A = PD6
    DDRD |= (1<<PD6);
 626:	8a b1       	in	r24, 0x0a	; 10
 628:	80 64       	ori	r24, 0x40	; 64
 62a:	8a b9       	out	0x0a, r24	; 10
    TCCR0A = (1<<WGM00)|(1<<WGM01)|(1<<COM0A1);  // Fast PWM, non-inverting
 62c:	83 e8       	ldi	r24, 0x83	; 131
 62e:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1<<CS01)|(1<<CS00);               // prescaler 64
 630:	23 e0       	ldi	r18, 0x03	; 3
 632:	25 bd       	out	0x25, r18	; 37

    // Timer1 Fast PWM 8bit  GREEN  OC1A = PB1
    DDRB |= (1<<PB1);
 634:	94 b1       	in	r25, 0x04	; 4
 636:	92 60       	ori	r25, 0x02	; 2
 638:	94 b9       	out	0x04, r25	; 4
    TCCR1A = (1<<WGM10)|(1<<WGM11)|(1<<COM1A1);
 63a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1<<CS11)|(1<<CS10);  // Fast PWM 8bit, prescaler 64
 63e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    // Timer2 Fast PWM 8bit  BLUE  OC2A = PB3
    DDRB |= (1<<PB3);
 642:	94 b1       	in	r25, 0x04	; 4
 644:	98 60       	ori	r25, 0x08	; 8
 646:	94 b9       	out	0x04, r25	; 4
    TCCR2A = (1<<WGM20)|(1<<WGM21)|(1<<COM2A1);
 648:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = (1<<CS22);            // prescaler 64
 64c:	84 e0       	ldi	r24, 0x04	; 4
 64e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

    pwm_update();
 652:	0e 94 8b 00 	call	0x116	; 0x116 <pwm_update>
 656:	08 95       	ret

00000658 <systick_init>:
  Usamos Timer1 em CTC A, OCR1A = 249 @ prescaler=64 em 16 MHz
  => 1 ms de interrupção
  ================================================================*/
void systick_init(void)
{
    TCCR1A &= ~((1<<WGM11)|(1<<WGM10));  // WGM1[3:2]=00
 658:	e0 e8       	ldi	r30, 0x80	; 128
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	8c 7f       	andi	r24, 0xFC	; 252
 660:	80 83       	st	Z, r24
    TCCR1B = (1<<WGM12)|(1<<CS11)|(1<<CS10); // CTC, prescaler 64
 662:	8b e0       	ldi	r24, 0x0B	; 11
 664:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    OCR1A = 249;
 668:	89 ef       	ldi	r24, 0xF9	; 249
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 670:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    TIMSK1 |= (1<<OCIE1A);
 674:	ef e6       	ldi	r30, 0x6F	; 111
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	82 60       	ori	r24, 0x02	; 2
 67c:	80 83       	st	Z, r24
 67e:	08 95       	ret

00000680 <pcint_init>:
/*================================================================
  Inicialização PCINT para PD2PD4
  ================================================================*/
void pcint_init(void)
{
    PCICR |= (1<<PCIE2);      // habilita PCINT2 (PORTD)
 680:	e8 e6       	ldi	r30, 0x68	; 104
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	84 60       	ori	r24, 0x04	; 4
 688:	80 83       	st	Z, r24
    PCMSK2 |= (1<<PCINT18)|(1<<PCINT19)|(1<<PCINT20);
 68a:	ed e6       	ldi	r30, 0x6D	; 109
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	8c 61       	ori	r24, 0x1C	; 28
 692:	80 83       	st	Z, r24
 694:	08 95       	ret

00000696 <lcd_cmd>:
    lcd_strobe();
}

/* envia comando RS=0 */
void lcd_cmd(uint8_t c)
{
 696:	cf 93       	push	r28
 698:	c8 2f       	mov	r28, r24
    PORTC &= ~(1<<LCD_RS);
 69a:	88 b1       	in	r24, 0x08	; 8
 69c:	8e 7f       	andi	r24, 0xFE	; 254
 69e:	88 b9       	out	0x08, r24	; 8
 6a0:	85 e0       	ldi	r24, 0x05	; 5
 6a2:	8a 95       	dec	r24
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <lcd_cmd+0xc>
 6a6:	00 00       	nop
    _delay_us(1);
    lcd_write_nibble(c>>4);
 6a8:	8c 2f       	mov	r24, r28
 6aa:	82 95       	swap	r24
 6ac:	8f 70       	andi	r24, 0x0F	; 15
 6ae:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write_nibble>
    lcd_write_nibble(c&0x0F);
 6b2:	8c 2f       	mov	r24, r28
 6b4:	8f 70       	andi	r24, 0x0F	; 15
 6b6:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ba:	8f e3       	ldi	r24, 0x3F	; 63
 6bc:	9f e1       	ldi	r25, 0x1F	; 31
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <lcd_cmd+0x28>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <lcd_cmd+0x2e>
 6c4:	00 00       	nop
    _delay_ms(2);
}
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <lcd_data>:

/* envia dado RS=1 */
void lcd_data(uint8_t d)
{
 6ca:	cf 93       	push	r28
 6cc:	c8 2f       	mov	r28, r24
    PORTC |=  (1<<LCD_RS);
 6ce:	88 b1       	in	r24, 0x08	; 8
 6d0:	81 60       	ori	r24, 0x01	; 1
 6d2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d4:	85 e0       	ldi	r24, 0x05	; 5
 6d6:	8a 95       	dec	r24
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <lcd_data+0xc>
 6da:	00 00       	nop
    _delay_us(1);
    lcd_write_nibble(d>>4);
 6dc:	8c 2f       	mov	r24, r28
 6de:	82 95       	swap	r24
 6e0:	8f 70       	andi	r24, 0x0F	; 15
 6e2:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write_nibble>
    lcd_write_nibble(d&0x0F);
 6e6:	8c 2f       	mov	r24, r28
 6e8:	8f 70       	andi	r24, 0x0F	; 15
 6ea:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write_nibble>
 6ee:	85 ed       	ldi	r24, 0xD5	; 213
 6f0:	8a 95       	dec	r24
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <lcd_data+0x26>
 6f4:	00 00       	nop
    _delay_us(40);
}
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <lcd_goto>:

/* posiciona cursor (linha 0/1, coluna 015) */
void lcd_goto(uint8_t linha, uint8_t col)
{
    uint8_t addr = (linha==0 ? 0x00 : 0x40) + col;
 6fa:	81 11       	cpse	r24, r1
 6fc:	80 e4       	ldi	r24, 0x40	; 64
 6fe:	86 0f       	add	r24, r22
    lcd_cmd(0x80 | addr);
 700:	80 68       	ori	r24, 0x80	; 128
 702:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_cmd>
 706:	08 95       	ret

00000708 <lcd_print>:
}

/* imprime string terminada em \0 */
void lcd_print(char *s)
{
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	ec 01       	movw	r28, r24
    while (*s) { lcd_data(*s++); }
 70e:	03 c0       	rjmp	.+6      	; 0x716 <lcd_print+0xe>
 710:	21 96       	adiw	r28, 0x01	; 1
 712:	0e 94 65 03 	call	0x6ca	; 0x6ca <lcd_data>
 716:	88 81       	ld	r24, Y
 718:	81 11       	cpse	r24, r1
 71a:	fa cf       	rjmp	.-12     	; 0x710 <lcd_print+0x8>
}
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	08 95       	ret

00000722 <lcd_refresh>:

/* atualiza toda a tela com valores e * no canal ativo */
void lcd_refresh(void)
{
 722:	0f 93       	push	r16
 724:	1f 93       	push	r17
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
 72e:	a2 97       	sbiw	r28, 0x22	; 34
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	f8 94       	cli
 734:	de bf       	out	0x3e, r29	; 62
 736:	0f be       	out	0x3f, r0	; 63
 738:	cd bf       	out	0x3d, r28	; 61
    char buf1[17], buf2[17];
    // formata linha 1: *R:XXX G:XXX
    snprintf(buf1,16, "%cR:%3u G:%3u",
 73a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <grn_val>
 73e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <red_val>
             (channel==0?'*':' '),
 742:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <channel>
/* atualiza toda a tela com valores e * no canal ativo */
void lcd_refresh(void)
{
    char buf1[17], buf2[17];
    // formata linha 1: *R:XXX G:XXX
    snprintf(buf1,16, "%cR:%3u G:%3u",
 746:	81 11       	cpse	r24, r1
 748:	03 c0       	rjmp	.+6      	; 0x750 <lcd_refresh+0x2e>
 74a:	8a e2       	ldi	r24, 0x2A	; 42
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <lcd_refresh+0x32>
 750:	80 e2       	ldi	r24, 0x20	; 32
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	1f 92       	push	r1
 756:	3f 93       	push	r19
 758:	1f 92       	push	r1
 75a:	2f 93       	push	r18
 75c:	9f 93       	push	r25
 75e:	8f 93       	push	r24
 760:	83 e0       	ldi	r24, 0x03	; 3
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	9f 93       	push	r25
 766:	8f 93       	push	r24
 768:	1f 92       	push	r1
 76a:	80 e1       	ldi	r24, 0x10	; 16
 76c:	8f 93       	push	r24
 76e:	ce 01       	movw	r24, r28
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	9f 93       	push	r25
 774:	8f 93       	push	r24
 776:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <snprintf>
             (channel==0?'*':' '),
              red_val, grn_val);
    // formata linha 2: *B:XXX
    snprintf(buf2,16, "%cB:%3u",
 77a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
             (channel==2?'*':' '),
 77e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <channel>
    // formata linha 1: *R:XXX G:XXX
    snprintf(buf1,16, "%cR:%3u G:%3u",
             (channel==0?'*':' '),
              red_val, grn_val);
    // formata linha 2: *B:XXX
    snprintf(buf2,16, "%cB:%3u",
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	f8 94       	cli
 786:	de bf       	out	0x3e, r29	; 62
 788:	0f be       	out	0x3f, r0	; 63
 78a:	cd bf       	out	0x3d, r28	; 61
 78c:	92 30       	cpi	r25, 0x02	; 2
 78e:	19 f4       	brne	.+6      	; 0x796 <lcd_refresh+0x74>
 790:	9a e2       	ldi	r25, 0x2A	; 42
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <lcd_refresh+0x78>
 796:	90 e2       	ldi	r25, 0x20	; 32
 798:	20 e0       	ldi	r18, 0x00	; 0
 79a:	1f 92       	push	r1
 79c:	8f 93       	push	r24
 79e:	2f 93       	push	r18
 7a0:	9f 93       	push	r25
 7a2:	81 e1       	ldi	r24, 0x11	; 17
 7a4:	91 e0       	ldi	r25, 0x01	; 1
 7a6:	9f 93       	push	r25
 7a8:	8f 93       	push	r24
 7aa:	1f 92       	push	r1
 7ac:	80 e1       	ldi	r24, 0x10	; 16
 7ae:	8f 93       	push	r24
 7b0:	8e 01       	movw	r16, r28
 7b2:	0e 5e       	subi	r16, 0xEE	; 238
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	1f 93       	push	r17
 7b8:	0f 93       	push	r16
 7ba:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <snprintf>
             (channel==2?'*':' '),
             blu_val);
    // desenha
    lcd_cmd(0x01);        // limpa tela
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7c4:	8f e3       	ldi	r24, 0x3F	; 63
 7c6:	9f e1       	ldi	r25, 0x1F	; 31
 7c8:	01 97       	sbiw	r24, 0x01	; 1
 7ca:	f1 f7       	brne	.-4      	; 0x7c8 <lcd_refresh+0xa6>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <lcd_refresh+0xac>
 7ce:	00 00       	nop
    _delay_ms(2);
    lcd_goto(0,0);
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <lcd_goto>
    lcd_print(buf1);
 7d8:	ce 01       	movw	r24, r28
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	0e 94 84 03 	call	0x708	; 0x708 <lcd_print>
    lcd_goto(1,0);
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <lcd_goto>
    lcd_print(buf2);
 7e8:	c8 01       	movw	r24, r16
 7ea:	0e 94 84 03 	call	0x708	; 0x708 <lcd_print>
}
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	f8 94       	cli
 7f2:	de bf       	out	0x3e, r29	; 62
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	cd bf       	out	0x3d, r28	; 61
 7f8:	a2 96       	adiw	r28, 0x22	; 34
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	f8 94       	cli
 7fe:	de bf       	out	0x3e, r29	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	cd bf       	out	0x3d, r28	; 61
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	1f 91       	pop	r17
 80a:	0f 91       	pop	r16
 80c:	08 95       	ret

0000080e <lcd_init>:

/* setup inicial do LCD */
void lcd_init(void)
{
    // portas como saída
    DDRC |= (1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_EN)
 80e:	87 b1       	in	r24, 0x07	; 7
 810:	8f 67       	ori	r24, 0x7F	; 127
 812:	87 b9       	out	0x07, r24	; 7
 814:	2f ef       	ldi	r18, 0xFF	; 255
 816:	83 ef       	ldi	r24, 0xF3	; 243
 818:	91 e0       	ldi	r25, 0x01	; 1
 81a:	21 50       	subi	r18, 0x01	; 1
 81c:	80 40       	sbci	r24, 0x00	; 0
 81e:	90 40       	sbci	r25, 0x00	; 0
 820:	e1 f7       	brne	.-8      	; 0x81a <lcd_init+0xc>
 822:	00 c0       	rjmp	.+0      	; 0x824 <lcd_init+0x16>
 824:	00 00       	nop
          |(1<<LCD_D4)|(1<<LCD_D5)|(1<<LCD_D6)|(1<<LCD_D7);
    _delay_ms(40);
    // init sequence 4-bit
    PORTC &= ~(1<<LCD_RW);
 826:	88 b1       	in	r24, 0x08	; 8
 828:	8d 7f       	andi	r24, 0xFD	; 253
 82a:	88 b9       	out	0x08, r24	; 8
    lcd_strobe(); lcd_strobe(); lcd_strobe();
 82c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_strobe>
 830:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_strobe>
 834:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_strobe>
    lcd_write_nibble(0x02);
 838:	82 e0       	ldi	r24, 0x02	; 2
 83a:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write_nibble>
    lcd_cmd(0x28);  // 4-bit, 2 linhas, fonte 5×8
 83e:	88 e2       	ldi	r24, 0x28	; 40
 840:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_cmd>
    lcd_cmd(0x08);  // display off
 844:	88 e0       	ldi	r24, 0x08	; 8
 846:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_cmd>
    lcd_cmd(0x0C);  // display on, cursor off
 84a:	8c e0       	ldi	r24, 0x0C	; 12
 84c:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_cmd>
    lcd_cmd(0x06);  // entrada incrementa
 850:	86 e0       	ldi	r24, 0x06	; 6
 852:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_cmd>
    lcd_cmd(0x01);  // limpa
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	0e 94 4b 03 	call	0x696	; 0x696 <lcd_cmd>
 85c:	8f e3       	ldi	r24, 0x3F	; 63
 85e:	9f e1       	ldi	r25, 0x1F	; 31
 860:	01 97       	sbiw	r24, 0x01	; 1
 862:	f1 f7       	brne	.-4      	; 0x860 <lcd_init+0x52>
 864:	00 c0       	rjmp	.+0      	; 0x866 <lcd_init+0x58>
 866:	00 00       	nop
 868:	08 95       	ret

0000086a <main>:
  Função principal
  ================================================================*/
int main(void)
{
    // desabilita interrupções
    cli();
 86a:	f8 94       	cli
    // pull-ups em PD2,PD3,PD4
    DDRD &= ~((1<<BTN_M)|(1<<BTN_UP)|(1<<BTN_DOWN));
 86c:	8a b1       	in	r24, 0x0a	; 10
 86e:	83 7e       	andi	r24, 0xE3	; 227
 870:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  ((1<<BTN_M)|(1<<BTN_UP)|(1<<BTN_DOWN));
 872:	8b b1       	in	r24, 0x0b	; 11
 874:	8c 61       	ori	r24, 0x1C	; 28
 876:	8b b9       	out	0x0b, r24	; 11

    pwm_init();
 878:	0e 94 13 03 	call	0x626	; 0x626 <pwm_init>
    lcd_init();
 87c:	0e 94 07 04 	call	0x80e	; 0x80e <lcd_init>
    systick_init();
 880:	0e 94 2c 03 	call	0x658	; 0x658 <systick_init>
    pcint_init();
 884:	0e 94 40 03 	call	0x680	; 0x680 <pcint_init>

    // libera interrupções
    sei();
 888:	78 94       	sei

    // primeira atualização de tela
    lcd_refresh();
 88a:	0e 94 91 03 	call	0x722	; 0x722 <lcd_refresh>
    lcd_update = false;
 88e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <lcd_update>

    // loop principal  só faz a atualização de tela
    for(;;) {
        if (lcd_update) {
 892:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <lcd_update>
 896:	88 23       	and	r24, r24
 898:	e1 f3       	breq	.-8      	; 0x892 <main+0x28>
            lcd_refresh();
 89a:	0e 94 91 03 	call	0x722	; 0x722 <lcd_refresh>
            lcd_update = false;
 89e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <lcd_update>
 8a2:	f7 cf       	rjmp	.-18     	; 0x892 <main+0x28>

000008a4 <__divmodhi4>:
 8a4:	97 fb       	bst	r25, 7
 8a6:	07 2e       	mov	r0, r23
 8a8:	16 f4       	brtc	.+4      	; 0x8ae <__divmodhi4+0xa>
 8aa:	00 94       	com	r0
 8ac:	07 d0       	rcall	.+14     	; 0x8bc <__divmodhi4_neg1>
 8ae:	77 fd       	sbrc	r23, 7
 8b0:	09 d0       	rcall	.+18     	; 0x8c4 <__divmodhi4_neg2>
 8b2:	0e 94 66 04 	call	0x8cc	; 0x8cc <__udivmodhi4>
 8b6:	07 fc       	sbrc	r0, 7
 8b8:	05 d0       	rcall	.+10     	; 0x8c4 <__divmodhi4_neg2>
 8ba:	3e f4       	brtc	.+14     	; 0x8ca <__divmodhi4_exit>

000008bc <__divmodhi4_neg1>:
 8bc:	90 95       	com	r25
 8be:	81 95       	neg	r24
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	08 95       	ret

000008c4 <__divmodhi4_neg2>:
 8c4:	70 95       	com	r23
 8c6:	61 95       	neg	r22
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255

000008ca <__divmodhi4_exit>:
 8ca:	08 95       	ret

000008cc <__udivmodhi4>:
 8cc:	aa 1b       	sub	r26, r26
 8ce:	bb 1b       	sub	r27, r27
 8d0:	51 e1       	ldi	r21, 0x11	; 17
 8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <__udivmodhi4_ep>

000008d4 <__udivmodhi4_loop>:
 8d4:	aa 1f       	adc	r26, r26
 8d6:	bb 1f       	adc	r27, r27
 8d8:	a6 17       	cp	r26, r22
 8da:	b7 07       	cpc	r27, r23
 8dc:	10 f0       	brcs	.+4      	; 0x8e2 <__udivmodhi4_ep>
 8de:	a6 1b       	sub	r26, r22
 8e0:	b7 0b       	sbc	r27, r23

000008e2 <__udivmodhi4_ep>:
 8e2:	88 1f       	adc	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	5a 95       	dec	r21
 8e8:	a9 f7       	brne	.-22     	; 0x8d4 <__udivmodhi4_loop>
 8ea:	80 95       	com	r24
 8ec:	90 95       	com	r25
 8ee:	bc 01       	movw	r22, r24
 8f0:	cd 01       	movw	r24, r26
 8f2:	08 95       	ret

000008f4 <snprintf>:
 8f4:	ae e0       	ldi	r26, 0x0E	; 14
 8f6:	b0 e0       	ldi	r27, 0x00	; 0
 8f8:	e0 e8       	ldi	r30, 0x80	; 128
 8fa:	f4 e0       	ldi	r31, 0x04	; 4
 8fc:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__prologue_saves__+0x1c>
 900:	0d 89       	ldd	r16, Y+21	; 0x15
 902:	1e 89       	ldd	r17, Y+22	; 0x16
 904:	8f 89       	ldd	r24, Y+23	; 0x17
 906:	98 8d       	ldd	r25, Y+24	; 0x18
 908:	26 e0       	ldi	r18, 0x06	; 6
 90a:	2c 83       	std	Y+4, r18	; 0x04
 90c:	1a 83       	std	Y+2, r17	; 0x02
 90e:	09 83       	std	Y+1, r16	; 0x01
 910:	97 ff       	sbrs	r25, 7
 912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	90 e8       	ldi	r25, 0x80	; 128
 918:	01 97       	sbiw	r24, 0x01	; 1
 91a:	9e 83       	std	Y+6, r25	; 0x06
 91c:	8d 83       	std	Y+5, r24	; 0x05
 91e:	ae 01       	movw	r20, r28
 920:	45 5e       	subi	r20, 0xE5	; 229
 922:	5f 4f       	sbci	r21, 0xFF	; 255
 924:	69 8d       	ldd	r22, Y+25	; 0x19
 926:	7a 8d       	ldd	r23, Y+26	; 0x1a
 928:	ce 01       	movw	r24, r28
 92a:	01 96       	adiw	r24, 0x01	; 1
 92c:	0e 94 aa 04 	call	0x954	; 0x954 <vfprintf>
 930:	4d 81       	ldd	r20, Y+5	; 0x05
 932:	5e 81       	ldd	r21, Y+6	; 0x06
 934:	57 fd       	sbrc	r21, 7
 936:	0a c0       	rjmp	.+20     	; 0x94c <__stack+0x4d>
 938:	2f 81       	ldd	r18, Y+7	; 0x07
 93a:	38 85       	ldd	r19, Y+8	; 0x08
 93c:	42 17       	cp	r20, r18
 93e:	53 07       	cpc	r21, r19
 940:	0c f4       	brge	.+2      	; 0x944 <__stack+0x45>
 942:	9a 01       	movw	r18, r20
 944:	f8 01       	movw	r30, r16
 946:	e2 0f       	add	r30, r18
 948:	f3 1f       	adc	r31, r19
 94a:	10 82       	st	Z, r1
 94c:	2e 96       	adiw	r28, 0x0e	; 14
 94e:	e4 e0       	ldi	r30, 0x04	; 4
 950:	0c 94 65 07 	jmp	0xeca	; 0xeca <__epilogue_restores__+0x1c>

00000954 <vfprintf>:
 954:	ab e0       	ldi	r26, 0x0B	; 11
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	e0 eb       	ldi	r30, 0xB0	; 176
 95a:	f4 e0       	ldi	r31, 0x04	; 4
 95c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__prologue_saves__>
 960:	6c 01       	movw	r12, r24
 962:	7b 01       	movw	r14, r22
 964:	8a 01       	movw	r16, r20
 966:	fc 01       	movw	r30, r24
 968:	17 82       	std	Z+7, r1	; 0x07
 96a:	16 82       	std	Z+6, r1	; 0x06
 96c:	83 81       	ldd	r24, Z+3	; 0x03
 96e:	81 ff       	sbrs	r24, 1
 970:	cc c1       	rjmp	.+920    	; 0xd0a <vfprintf+0x3b6>
 972:	ce 01       	movw	r24, r28
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	3c 01       	movw	r6, r24
 978:	f6 01       	movw	r30, r12
 97a:	93 81       	ldd	r25, Z+3	; 0x03
 97c:	f7 01       	movw	r30, r14
 97e:	93 fd       	sbrc	r25, 3
 980:	85 91       	lpm	r24, Z+
 982:	93 ff       	sbrs	r25, 3
 984:	81 91       	ld	r24, Z+
 986:	7f 01       	movw	r14, r30
 988:	88 23       	and	r24, r24
 98a:	09 f4       	brne	.+2      	; 0x98e <vfprintf+0x3a>
 98c:	ba c1       	rjmp	.+884    	; 0xd02 <vfprintf+0x3ae>
 98e:	85 32       	cpi	r24, 0x25	; 37
 990:	39 f4       	brne	.+14     	; 0x9a0 <vfprintf+0x4c>
 992:	93 fd       	sbrc	r25, 3
 994:	85 91       	lpm	r24, Z+
 996:	93 ff       	sbrs	r25, 3
 998:	81 91       	ld	r24, Z+
 99a:	7f 01       	movw	r14, r30
 99c:	85 32       	cpi	r24, 0x25	; 37
 99e:	29 f4       	brne	.+10     	; 0x9aa <vfprintf+0x56>
 9a0:	b6 01       	movw	r22, r12
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 9a8:	e7 cf       	rjmp	.-50     	; 0x978 <vfprintf+0x24>
 9aa:	91 2c       	mov	r9, r1
 9ac:	21 2c       	mov	r2, r1
 9ae:	31 2c       	mov	r3, r1
 9b0:	ff e1       	ldi	r31, 0x1F	; 31
 9b2:	f3 15       	cp	r31, r3
 9b4:	d8 f0       	brcs	.+54     	; 0x9ec <vfprintf+0x98>
 9b6:	8b 32       	cpi	r24, 0x2B	; 43
 9b8:	79 f0       	breq	.+30     	; 0x9d8 <vfprintf+0x84>
 9ba:	38 f4       	brcc	.+14     	; 0x9ca <vfprintf+0x76>
 9bc:	80 32       	cpi	r24, 0x20	; 32
 9be:	79 f0       	breq	.+30     	; 0x9de <vfprintf+0x8a>
 9c0:	83 32       	cpi	r24, 0x23	; 35
 9c2:	a1 f4       	brne	.+40     	; 0x9ec <vfprintf+0x98>
 9c4:	23 2d       	mov	r18, r3
 9c6:	20 61       	ori	r18, 0x10	; 16
 9c8:	1d c0       	rjmp	.+58     	; 0xa04 <vfprintf+0xb0>
 9ca:	8d 32       	cpi	r24, 0x2D	; 45
 9cc:	61 f0       	breq	.+24     	; 0x9e6 <vfprintf+0x92>
 9ce:	80 33       	cpi	r24, 0x30	; 48
 9d0:	69 f4       	brne	.+26     	; 0x9ec <vfprintf+0x98>
 9d2:	23 2d       	mov	r18, r3
 9d4:	21 60       	ori	r18, 0x01	; 1
 9d6:	16 c0       	rjmp	.+44     	; 0xa04 <vfprintf+0xb0>
 9d8:	83 2d       	mov	r24, r3
 9da:	82 60       	ori	r24, 0x02	; 2
 9dc:	38 2e       	mov	r3, r24
 9de:	e3 2d       	mov	r30, r3
 9e0:	e4 60       	ori	r30, 0x04	; 4
 9e2:	3e 2e       	mov	r3, r30
 9e4:	2a c0       	rjmp	.+84     	; 0xa3a <vfprintf+0xe6>
 9e6:	f3 2d       	mov	r31, r3
 9e8:	f8 60       	ori	r31, 0x08	; 8
 9ea:	1d c0       	rjmp	.+58     	; 0xa26 <vfprintf+0xd2>
 9ec:	37 fc       	sbrc	r3, 7
 9ee:	2d c0       	rjmp	.+90     	; 0xa4a <vfprintf+0xf6>
 9f0:	20 ed       	ldi	r18, 0xD0	; 208
 9f2:	28 0f       	add	r18, r24
 9f4:	2a 30       	cpi	r18, 0x0A	; 10
 9f6:	40 f0       	brcs	.+16     	; 0xa08 <vfprintf+0xb4>
 9f8:	8e 32       	cpi	r24, 0x2E	; 46
 9fa:	b9 f4       	brne	.+46     	; 0xa2a <vfprintf+0xd6>
 9fc:	36 fc       	sbrc	r3, 6
 9fe:	81 c1       	rjmp	.+770    	; 0xd02 <vfprintf+0x3ae>
 a00:	23 2d       	mov	r18, r3
 a02:	20 64       	ori	r18, 0x40	; 64
 a04:	32 2e       	mov	r3, r18
 a06:	19 c0       	rjmp	.+50     	; 0xa3a <vfprintf+0xe6>
 a08:	36 fe       	sbrs	r3, 6
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <vfprintf+0xc4>
 a0c:	8a e0       	ldi	r24, 0x0A	; 10
 a0e:	98 9e       	mul	r9, r24
 a10:	20 0d       	add	r18, r0
 a12:	11 24       	eor	r1, r1
 a14:	92 2e       	mov	r9, r18
 a16:	11 c0       	rjmp	.+34     	; 0xa3a <vfprintf+0xe6>
 a18:	ea e0       	ldi	r30, 0x0A	; 10
 a1a:	2e 9e       	mul	r2, r30
 a1c:	20 0d       	add	r18, r0
 a1e:	11 24       	eor	r1, r1
 a20:	22 2e       	mov	r2, r18
 a22:	f3 2d       	mov	r31, r3
 a24:	f0 62       	ori	r31, 0x20	; 32
 a26:	3f 2e       	mov	r3, r31
 a28:	08 c0       	rjmp	.+16     	; 0xa3a <vfprintf+0xe6>
 a2a:	8c 36       	cpi	r24, 0x6C	; 108
 a2c:	21 f4       	brne	.+8      	; 0xa36 <vfprintf+0xe2>
 a2e:	83 2d       	mov	r24, r3
 a30:	80 68       	ori	r24, 0x80	; 128
 a32:	38 2e       	mov	r3, r24
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <vfprintf+0xe6>
 a36:	88 36       	cpi	r24, 0x68	; 104
 a38:	41 f4       	brne	.+16     	; 0xa4a <vfprintf+0xf6>
 a3a:	f7 01       	movw	r30, r14
 a3c:	93 fd       	sbrc	r25, 3
 a3e:	85 91       	lpm	r24, Z+
 a40:	93 ff       	sbrs	r25, 3
 a42:	81 91       	ld	r24, Z+
 a44:	7f 01       	movw	r14, r30
 a46:	81 11       	cpse	r24, r1
 a48:	b3 cf       	rjmp	.-154    	; 0x9b0 <vfprintf+0x5c>
 a4a:	98 2f       	mov	r25, r24
 a4c:	9f 7d       	andi	r25, 0xDF	; 223
 a4e:	95 54       	subi	r25, 0x45	; 69
 a50:	93 30       	cpi	r25, 0x03	; 3
 a52:	28 f4       	brcc	.+10     	; 0xa5e <vfprintf+0x10a>
 a54:	0c 5f       	subi	r16, 0xFC	; 252
 a56:	1f 4f       	sbci	r17, 0xFF	; 255
 a58:	9f e3       	ldi	r25, 0x3F	; 63
 a5a:	99 83       	std	Y+1, r25	; 0x01
 a5c:	0d c0       	rjmp	.+26     	; 0xa78 <vfprintf+0x124>
 a5e:	83 36       	cpi	r24, 0x63	; 99
 a60:	31 f0       	breq	.+12     	; 0xa6e <vfprintf+0x11a>
 a62:	83 37       	cpi	r24, 0x73	; 115
 a64:	71 f0       	breq	.+28     	; 0xa82 <vfprintf+0x12e>
 a66:	83 35       	cpi	r24, 0x53	; 83
 a68:	09 f0       	breq	.+2      	; 0xa6c <vfprintf+0x118>
 a6a:	59 c0       	rjmp	.+178    	; 0xb1e <vfprintf+0x1ca>
 a6c:	21 c0       	rjmp	.+66     	; 0xab0 <vfprintf+0x15c>
 a6e:	f8 01       	movw	r30, r16
 a70:	80 81       	ld	r24, Z
 a72:	89 83       	std	Y+1, r24	; 0x01
 a74:	0e 5f       	subi	r16, 0xFE	; 254
 a76:	1f 4f       	sbci	r17, 0xFF	; 255
 a78:	88 24       	eor	r8, r8
 a7a:	83 94       	inc	r8
 a7c:	91 2c       	mov	r9, r1
 a7e:	53 01       	movw	r10, r6
 a80:	13 c0       	rjmp	.+38     	; 0xaa8 <vfprintf+0x154>
 a82:	28 01       	movw	r4, r16
 a84:	f2 e0       	ldi	r31, 0x02	; 2
 a86:	4f 0e       	add	r4, r31
 a88:	51 1c       	adc	r5, r1
 a8a:	f8 01       	movw	r30, r16
 a8c:	a0 80       	ld	r10, Z
 a8e:	b1 80       	ldd	r11, Z+1	; 0x01
 a90:	36 fe       	sbrs	r3, 6
 a92:	03 c0       	rjmp	.+6      	; 0xa9a <vfprintf+0x146>
 a94:	69 2d       	mov	r22, r9
 a96:	70 e0       	ldi	r23, 0x00	; 0
 a98:	02 c0       	rjmp	.+4      	; 0xa9e <vfprintf+0x14a>
 a9a:	6f ef       	ldi	r22, 0xFF	; 255
 a9c:	7f ef       	ldi	r23, 0xFF	; 255
 a9e:	c5 01       	movw	r24, r10
 aa0:	0e 94 96 06 	call	0xd2c	; 0xd2c <strnlen>
 aa4:	4c 01       	movw	r8, r24
 aa6:	82 01       	movw	r16, r4
 aa8:	f3 2d       	mov	r31, r3
 aaa:	ff 77       	andi	r31, 0x7F	; 127
 aac:	3f 2e       	mov	r3, r31
 aae:	16 c0       	rjmp	.+44     	; 0xadc <vfprintf+0x188>
 ab0:	28 01       	movw	r4, r16
 ab2:	22 e0       	ldi	r18, 0x02	; 2
 ab4:	42 0e       	add	r4, r18
 ab6:	51 1c       	adc	r5, r1
 ab8:	f8 01       	movw	r30, r16
 aba:	a0 80       	ld	r10, Z
 abc:	b1 80       	ldd	r11, Z+1	; 0x01
 abe:	36 fe       	sbrs	r3, 6
 ac0:	03 c0       	rjmp	.+6      	; 0xac8 <vfprintf+0x174>
 ac2:	69 2d       	mov	r22, r9
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <vfprintf+0x178>
 ac8:	6f ef       	ldi	r22, 0xFF	; 255
 aca:	7f ef       	ldi	r23, 0xFF	; 255
 acc:	c5 01       	movw	r24, r10
 ace:	0e 94 8b 06 	call	0xd16	; 0xd16 <strnlen_P>
 ad2:	4c 01       	movw	r8, r24
 ad4:	f3 2d       	mov	r31, r3
 ad6:	f0 68       	ori	r31, 0x80	; 128
 ad8:	3f 2e       	mov	r3, r31
 ada:	82 01       	movw	r16, r4
 adc:	33 fc       	sbrc	r3, 3
 ade:	1b c0       	rjmp	.+54     	; 0xb16 <vfprintf+0x1c2>
 ae0:	82 2d       	mov	r24, r2
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	88 16       	cp	r8, r24
 ae6:	99 06       	cpc	r9, r25
 ae8:	b0 f4       	brcc	.+44     	; 0xb16 <vfprintf+0x1c2>
 aea:	b6 01       	movw	r22, r12
 aec:	80 e2       	ldi	r24, 0x20	; 32
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 af4:	2a 94       	dec	r2
 af6:	f4 cf       	rjmp	.-24     	; 0xae0 <vfprintf+0x18c>
 af8:	f5 01       	movw	r30, r10
 afa:	37 fc       	sbrc	r3, 7
 afc:	85 91       	lpm	r24, Z+
 afe:	37 fe       	sbrs	r3, 7
 b00:	81 91       	ld	r24, Z+
 b02:	5f 01       	movw	r10, r30
 b04:	b6 01       	movw	r22, r12
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 b0c:	21 10       	cpse	r2, r1
 b0e:	2a 94       	dec	r2
 b10:	21 e0       	ldi	r18, 0x01	; 1
 b12:	82 1a       	sub	r8, r18
 b14:	91 08       	sbc	r9, r1
 b16:	81 14       	cp	r8, r1
 b18:	91 04       	cpc	r9, r1
 b1a:	71 f7       	brne	.-36     	; 0xaf8 <vfprintf+0x1a4>
 b1c:	e8 c0       	rjmp	.+464    	; 0xcee <vfprintf+0x39a>
 b1e:	84 36       	cpi	r24, 0x64	; 100
 b20:	11 f0       	breq	.+4      	; 0xb26 <vfprintf+0x1d2>
 b22:	89 36       	cpi	r24, 0x69	; 105
 b24:	41 f5       	brne	.+80     	; 0xb76 <vfprintf+0x222>
 b26:	f8 01       	movw	r30, r16
 b28:	37 fe       	sbrs	r3, 7
 b2a:	07 c0       	rjmp	.+14     	; 0xb3a <vfprintf+0x1e6>
 b2c:	60 81       	ld	r22, Z
 b2e:	71 81       	ldd	r23, Z+1	; 0x01
 b30:	82 81       	ldd	r24, Z+2	; 0x02
 b32:	93 81       	ldd	r25, Z+3	; 0x03
 b34:	0c 5f       	subi	r16, 0xFC	; 252
 b36:	1f 4f       	sbci	r17, 0xFF	; 255
 b38:	08 c0       	rjmp	.+16     	; 0xb4a <vfprintf+0x1f6>
 b3a:	60 81       	ld	r22, Z
 b3c:	71 81       	ldd	r23, Z+1	; 0x01
 b3e:	07 2e       	mov	r0, r23
 b40:	00 0c       	add	r0, r0
 b42:	88 0b       	sbc	r24, r24
 b44:	99 0b       	sbc	r25, r25
 b46:	0e 5f       	subi	r16, 0xFE	; 254
 b48:	1f 4f       	sbci	r17, 0xFF	; 255
 b4a:	f3 2d       	mov	r31, r3
 b4c:	ff 76       	andi	r31, 0x6F	; 111
 b4e:	3f 2e       	mov	r3, r31
 b50:	97 ff       	sbrs	r25, 7
 b52:	09 c0       	rjmp	.+18     	; 0xb66 <vfprintf+0x212>
 b54:	90 95       	com	r25
 b56:	80 95       	com	r24
 b58:	70 95       	com	r23
 b5a:	61 95       	neg	r22
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	8f 4f       	sbci	r24, 0xFF	; 255
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	f0 68       	ori	r31, 0x80	; 128
 b64:	3f 2e       	mov	r3, r31
 b66:	2a e0       	ldi	r18, 0x0A	; 10
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	a3 01       	movw	r20, r6
 b6c:	0e 94 dd 06 	call	0xdba	; 0xdba <__ultoa_invert>
 b70:	88 2e       	mov	r8, r24
 b72:	86 18       	sub	r8, r6
 b74:	45 c0       	rjmp	.+138    	; 0xc00 <vfprintf+0x2ac>
 b76:	85 37       	cpi	r24, 0x75	; 117
 b78:	31 f4       	brne	.+12     	; 0xb86 <vfprintf+0x232>
 b7a:	23 2d       	mov	r18, r3
 b7c:	2f 7e       	andi	r18, 0xEF	; 239
 b7e:	b2 2e       	mov	r11, r18
 b80:	2a e0       	ldi	r18, 0x0A	; 10
 b82:	30 e0       	ldi	r19, 0x00	; 0
 b84:	25 c0       	rjmp	.+74     	; 0xbd0 <vfprintf+0x27c>
 b86:	93 2d       	mov	r25, r3
 b88:	99 7f       	andi	r25, 0xF9	; 249
 b8a:	b9 2e       	mov	r11, r25
 b8c:	8f 36       	cpi	r24, 0x6F	; 111
 b8e:	c1 f0       	breq	.+48     	; 0xbc0 <vfprintf+0x26c>
 b90:	18 f4       	brcc	.+6      	; 0xb98 <vfprintf+0x244>
 b92:	88 35       	cpi	r24, 0x58	; 88
 b94:	79 f0       	breq	.+30     	; 0xbb4 <vfprintf+0x260>
 b96:	b5 c0       	rjmp	.+362    	; 0xd02 <vfprintf+0x3ae>
 b98:	80 37       	cpi	r24, 0x70	; 112
 b9a:	19 f0       	breq	.+6      	; 0xba2 <vfprintf+0x24e>
 b9c:	88 37       	cpi	r24, 0x78	; 120
 b9e:	21 f0       	breq	.+8      	; 0xba8 <vfprintf+0x254>
 ba0:	b0 c0       	rjmp	.+352    	; 0xd02 <vfprintf+0x3ae>
 ba2:	e9 2f       	mov	r30, r25
 ba4:	e0 61       	ori	r30, 0x10	; 16
 ba6:	be 2e       	mov	r11, r30
 ba8:	b4 fe       	sbrs	r11, 4
 baa:	0d c0       	rjmp	.+26     	; 0xbc6 <vfprintf+0x272>
 bac:	fb 2d       	mov	r31, r11
 bae:	f4 60       	ori	r31, 0x04	; 4
 bb0:	bf 2e       	mov	r11, r31
 bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <vfprintf+0x272>
 bb4:	34 fe       	sbrs	r3, 4
 bb6:	0a c0       	rjmp	.+20     	; 0xbcc <vfprintf+0x278>
 bb8:	29 2f       	mov	r18, r25
 bba:	26 60       	ori	r18, 0x06	; 6
 bbc:	b2 2e       	mov	r11, r18
 bbe:	06 c0       	rjmp	.+12     	; 0xbcc <vfprintf+0x278>
 bc0:	28 e0       	ldi	r18, 0x08	; 8
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <vfprintf+0x27c>
 bc6:	20 e1       	ldi	r18, 0x10	; 16
 bc8:	30 e0       	ldi	r19, 0x00	; 0
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <vfprintf+0x27c>
 bcc:	20 e1       	ldi	r18, 0x10	; 16
 bce:	32 e0       	ldi	r19, 0x02	; 2
 bd0:	f8 01       	movw	r30, r16
 bd2:	b7 fe       	sbrs	r11, 7
 bd4:	07 c0       	rjmp	.+14     	; 0xbe4 <vfprintf+0x290>
 bd6:	60 81       	ld	r22, Z
 bd8:	71 81       	ldd	r23, Z+1	; 0x01
 bda:	82 81       	ldd	r24, Z+2	; 0x02
 bdc:	93 81       	ldd	r25, Z+3	; 0x03
 bde:	0c 5f       	subi	r16, 0xFC	; 252
 be0:	1f 4f       	sbci	r17, 0xFF	; 255
 be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0x29c>
 be4:	60 81       	ld	r22, Z
 be6:	71 81       	ldd	r23, Z+1	; 0x01
 be8:	80 e0       	ldi	r24, 0x00	; 0
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 5f       	subi	r16, 0xFE	; 254
 bee:	1f 4f       	sbci	r17, 0xFF	; 255
 bf0:	a3 01       	movw	r20, r6
 bf2:	0e 94 dd 06 	call	0xdba	; 0xdba <__ultoa_invert>
 bf6:	88 2e       	mov	r8, r24
 bf8:	86 18       	sub	r8, r6
 bfa:	fb 2d       	mov	r31, r11
 bfc:	ff 77       	andi	r31, 0x7F	; 127
 bfe:	3f 2e       	mov	r3, r31
 c00:	36 fe       	sbrs	r3, 6
 c02:	0d c0       	rjmp	.+26     	; 0xc1e <vfprintf+0x2ca>
 c04:	23 2d       	mov	r18, r3
 c06:	2e 7f       	andi	r18, 0xFE	; 254
 c08:	a2 2e       	mov	r10, r18
 c0a:	89 14       	cp	r8, r9
 c0c:	58 f4       	brcc	.+22     	; 0xc24 <vfprintf+0x2d0>
 c0e:	34 fe       	sbrs	r3, 4
 c10:	0b c0       	rjmp	.+22     	; 0xc28 <vfprintf+0x2d4>
 c12:	32 fc       	sbrc	r3, 2
 c14:	09 c0       	rjmp	.+18     	; 0xc28 <vfprintf+0x2d4>
 c16:	83 2d       	mov	r24, r3
 c18:	8e 7e       	andi	r24, 0xEE	; 238
 c1a:	a8 2e       	mov	r10, r24
 c1c:	05 c0       	rjmp	.+10     	; 0xc28 <vfprintf+0x2d4>
 c1e:	b8 2c       	mov	r11, r8
 c20:	a3 2c       	mov	r10, r3
 c22:	03 c0       	rjmp	.+6      	; 0xc2a <vfprintf+0x2d6>
 c24:	b8 2c       	mov	r11, r8
 c26:	01 c0       	rjmp	.+2      	; 0xc2a <vfprintf+0x2d6>
 c28:	b9 2c       	mov	r11, r9
 c2a:	a4 fe       	sbrs	r10, 4
 c2c:	0f c0       	rjmp	.+30     	; 0xc4c <vfprintf+0x2f8>
 c2e:	fe 01       	movw	r30, r28
 c30:	e8 0d       	add	r30, r8
 c32:	f1 1d       	adc	r31, r1
 c34:	80 81       	ld	r24, Z
 c36:	80 33       	cpi	r24, 0x30	; 48
 c38:	21 f4       	brne	.+8      	; 0xc42 <vfprintf+0x2ee>
 c3a:	9a 2d       	mov	r25, r10
 c3c:	99 7e       	andi	r25, 0xE9	; 233
 c3e:	a9 2e       	mov	r10, r25
 c40:	09 c0       	rjmp	.+18     	; 0xc54 <vfprintf+0x300>
 c42:	a2 fe       	sbrs	r10, 2
 c44:	06 c0       	rjmp	.+12     	; 0xc52 <vfprintf+0x2fe>
 c46:	b3 94       	inc	r11
 c48:	b3 94       	inc	r11
 c4a:	04 c0       	rjmp	.+8      	; 0xc54 <vfprintf+0x300>
 c4c:	8a 2d       	mov	r24, r10
 c4e:	86 78       	andi	r24, 0x86	; 134
 c50:	09 f0       	breq	.+2      	; 0xc54 <vfprintf+0x300>
 c52:	b3 94       	inc	r11
 c54:	a3 fc       	sbrc	r10, 3
 c56:	11 c0       	rjmp	.+34     	; 0xc7a <vfprintf+0x326>
 c58:	a0 fe       	sbrs	r10, 0
 c5a:	06 c0       	rjmp	.+12     	; 0xc68 <vfprintf+0x314>
 c5c:	b2 14       	cp	r11, r2
 c5e:	88 f4       	brcc	.+34     	; 0xc82 <vfprintf+0x32e>
 c60:	28 0c       	add	r2, r8
 c62:	92 2c       	mov	r9, r2
 c64:	9b 18       	sub	r9, r11
 c66:	0e c0       	rjmp	.+28     	; 0xc84 <vfprintf+0x330>
 c68:	b2 14       	cp	r11, r2
 c6a:	60 f4       	brcc	.+24     	; 0xc84 <vfprintf+0x330>
 c6c:	b6 01       	movw	r22, r12
 c6e:	80 e2       	ldi	r24, 0x20	; 32
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 c76:	b3 94       	inc	r11
 c78:	f7 cf       	rjmp	.-18     	; 0xc68 <vfprintf+0x314>
 c7a:	b2 14       	cp	r11, r2
 c7c:	18 f4       	brcc	.+6      	; 0xc84 <vfprintf+0x330>
 c7e:	2b 18       	sub	r2, r11
 c80:	02 c0       	rjmp	.+4      	; 0xc86 <vfprintf+0x332>
 c82:	98 2c       	mov	r9, r8
 c84:	21 2c       	mov	r2, r1
 c86:	a4 fe       	sbrs	r10, 4
 c88:	10 c0       	rjmp	.+32     	; 0xcaa <vfprintf+0x356>
 c8a:	b6 01       	movw	r22, r12
 c8c:	80 e3       	ldi	r24, 0x30	; 48
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 c94:	a2 fe       	sbrs	r10, 2
 c96:	17 c0       	rjmp	.+46     	; 0xcc6 <vfprintf+0x372>
 c98:	a1 fc       	sbrc	r10, 1
 c9a:	03 c0       	rjmp	.+6      	; 0xca2 <vfprintf+0x34e>
 c9c:	88 e7       	ldi	r24, 0x78	; 120
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	02 c0       	rjmp	.+4      	; 0xca6 <vfprintf+0x352>
 ca2:	88 e5       	ldi	r24, 0x58	; 88
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	b6 01       	movw	r22, r12
 ca8:	0c c0       	rjmp	.+24     	; 0xcc2 <vfprintf+0x36e>
 caa:	8a 2d       	mov	r24, r10
 cac:	86 78       	andi	r24, 0x86	; 134
 cae:	59 f0       	breq	.+22     	; 0xcc6 <vfprintf+0x372>
 cb0:	a1 fe       	sbrs	r10, 1
 cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <vfprintf+0x364>
 cb4:	8b e2       	ldi	r24, 0x2B	; 43
 cb6:	01 c0       	rjmp	.+2      	; 0xcba <vfprintf+0x366>
 cb8:	80 e2       	ldi	r24, 0x20	; 32
 cba:	a7 fc       	sbrc	r10, 7
 cbc:	8d e2       	ldi	r24, 0x2D	; 45
 cbe:	b6 01       	movw	r22, r12
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 cc6:	89 14       	cp	r8, r9
 cc8:	38 f4       	brcc	.+14     	; 0xcd8 <vfprintf+0x384>
 cca:	b6 01       	movw	r22, r12
 ccc:	80 e3       	ldi	r24, 0x30	; 48
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 cd4:	9a 94       	dec	r9
 cd6:	f7 cf       	rjmp	.-18     	; 0xcc6 <vfprintf+0x372>
 cd8:	8a 94       	dec	r8
 cda:	f3 01       	movw	r30, r6
 cdc:	e8 0d       	add	r30, r8
 cde:	f1 1d       	adc	r31, r1
 ce0:	80 81       	ld	r24, Z
 ce2:	b6 01       	movw	r22, r12
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 cea:	81 10       	cpse	r8, r1
 cec:	f5 cf       	rjmp	.-22     	; 0xcd8 <vfprintf+0x384>
 cee:	22 20       	and	r2, r2
 cf0:	09 f4       	brne	.+2      	; 0xcf4 <vfprintf+0x3a0>
 cf2:	42 ce       	rjmp	.-892    	; 0x978 <vfprintf+0x24>
 cf4:	b6 01       	movw	r22, r12
 cf6:	80 e2       	ldi	r24, 0x20	; 32
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	0e 94 a1 06 	call	0xd42	; 0xd42 <fputc>
 cfe:	2a 94       	dec	r2
 d00:	f6 cf       	rjmp	.-20     	; 0xcee <vfprintf+0x39a>
 d02:	f6 01       	movw	r30, r12
 d04:	86 81       	ldd	r24, Z+6	; 0x06
 d06:	97 81       	ldd	r25, Z+7	; 0x07
 d08:	02 c0       	rjmp	.+4      	; 0xd0e <vfprintf+0x3ba>
 d0a:	8f ef       	ldi	r24, 0xFF	; 255
 d0c:	9f ef       	ldi	r25, 0xFF	; 255
 d0e:	2b 96       	adiw	r28, 0x0b	; 11
 d10:	e2 e1       	ldi	r30, 0x12	; 18
 d12:	0c 94 57 07 	jmp	0xeae	; 0xeae <__epilogue_restores__>

00000d16 <strnlen_P>:
 d16:	fc 01       	movw	r30, r24
 d18:	05 90       	lpm	r0, Z+
 d1a:	61 50       	subi	r22, 0x01	; 1
 d1c:	70 40       	sbci	r23, 0x00	; 0
 d1e:	01 10       	cpse	r0, r1
 d20:	d8 f7       	brcc	.-10     	; 0xd18 <strnlen_P+0x2>
 d22:	80 95       	com	r24
 d24:	90 95       	com	r25
 d26:	8e 0f       	add	r24, r30
 d28:	9f 1f       	adc	r25, r31
 d2a:	08 95       	ret

00000d2c <strnlen>:
 d2c:	fc 01       	movw	r30, r24
 d2e:	61 50       	subi	r22, 0x01	; 1
 d30:	70 40       	sbci	r23, 0x00	; 0
 d32:	01 90       	ld	r0, Z+
 d34:	01 10       	cpse	r0, r1
 d36:	d8 f7       	brcc	.-10     	; 0xd2e <strnlen+0x2>
 d38:	80 95       	com	r24
 d3a:	90 95       	com	r25
 d3c:	8e 0f       	add	r24, r30
 d3e:	9f 1f       	adc	r25, r31
 d40:	08 95       	ret

00000d42 <fputc>:
 d42:	0f 93       	push	r16
 d44:	1f 93       	push	r17
 d46:	cf 93       	push	r28
 d48:	df 93       	push	r29
 d4a:	fb 01       	movw	r30, r22
 d4c:	23 81       	ldd	r18, Z+3	; 0x03
 d4e:	21 fd       	sbrc	r18, 1
 d50:	03 c0       	rjmp	.+6      	; 0xd58 <fputc+0x16>
 d52:	8f ef       	ldi	r24, 0xFF	; 255
 d54:	9f ef       	ldi	r25, 0xFF	; 255
 d56:	2c c0       	rjmp	.+88     	; 0xdb0 <fputc+0x6e>
 d58:	22 ff       	sbrs	r18, 2
 d5a:	16 c0       	rjmp	.+44     	; 0xd88 <fputc+0x46>
 d5c:	46 81       	ldd	r20, Z+6	; 0x06
 d5e:	57 81       	ldd	r21, Z+7	; 0x07
 d60:	24 81       	ldd	r18, Z+4	; 0x04
 d62:	35 81       	ldd	r19, Z+5	; 0x05
 d64:	42 17       	cp	r20, r18
 d66:	53 07       	cpc	r21, r19
 d68:	44 f4       	brge	.+16     	; 0xd7a <fputc+0x38>
 d6a:	a0 81       	ld	r26, Z
 d6c:	b1 81       	ldd	r27, Z+1	; 0x01
 d6e:	9d 01       	movw	r18, r26
 d70:	2f 5f       	subi	r18, 0xFF	; 255
 d72:	3f 4f       	sbci	r19, 0xFF	; 255
 d74:	31 83       	std	Z+1, r19	; 0x01
 d76:	20 83       	st	Z, r18
 d78:	8c 93       	st	X, r24
 d7a:	26 81       	ldd	r18, Z+6	; 0x06
 d7c:	37 81       	ldd	r19, Z+7	; 0x07
 d7e:	2f 5f       	subi	r18, 0xFF	; 255
 d80:	3f 4f       	sbci	r19, 0xFF	; 255
 d82:	37 83       	std	Z+7, r19	; 0x07
 d84:	26 83       	std	Z+6, r18	; 0x06
 d86:	14 c0       	rjmp	.+40     	; 0xdb0 <fputc+0x6e>
 d88:	8b 01       	movw	r16, r22
 d8a:	ec 01       	movw	r28, r24
 d8c:	fb 01       	movw	r30, r22
 d8e:	00 84       	ldd	r0, Z+8	; 0x08
 d90:	f1 85       	ldd	r31, Z+9	; 0x09
 d92:	e0 2d       	mov	r30, r0
 d94:	09 95       	icall
 d96:	89 2b       	or	r24, r25
 d98:	e1 f6       	brne	.-72     	; 0xd52 <fputc+0x10>
 d9a:	d8 01       	movw	r26, r16
 d9c:	16 96       	adiw	r26, 0x06	; 6
 d9e:	8d 91       	ld	r24, X+
 da0:	9c 91       	ld	r25, X
 da2:	17 97       	sbiw	r26, 0x07	; 7
 da4:	01 96       	adiw	r24, 0x01	; 1
 da6:	17 96       	adiw	r26, 0x07	; 7
 da8:	9c 93       	st	X, r25
 daa:	8e 93       	st	-X, r24
 dac:	16 97       	sbiw	r26, 0x06	; 6
 dae:	ce 01       	movw	r24, r28
 db0:	df 91       	pop	r29
 db2:	cf 91       	pop	r28
 db4:	1f 91       	pop	r17
 db6:	0f 91       	pop	r16
 db8:	08 95       	ret

00000dba <__ultoa_invert>:
 dba:	fa 01       	movw	r30, r20
 dbc:	aa 27       	eor	r26, r26
 dbe:	28 30       	cpi	r18, 0x08	; 8
 dc0:	51 f1       	breq	.+84     	; 0xe16 <__ultoa_invert+0x5c>
 dc2:	20 31       	cpi	r18, 0x10	; 16
 dc4:	81 f1       	breq	.+96     	; 0xe26 <__ultoa_invert+0x6c>
 dc6:	e8 94       	clt
 dc8:	6f 93       	push	r22
 dca:	6e 7f       	andi	r22, 0xFE	; 254
 dcc:	6e 5f       	subi	r22, 0xFE	; 254
 dce:	7f 4f       	sbci	r23, 0xFF	; 255
 dd0:	8f 4f       	sbci	r24, 0xFF	; 255
 dd2:	9f 4f       	sbci	r25, 0xFF	; 255
 dd4:	af 4f       	sbci	r26, 0xFF	; 255
 dd6:	b1 e0       	ldi	r27, 0x01	; 1
 dd8:	3e d0       	rcall	.+124    	; 0xe56 <__ultoa_invert+0x9c>
 dda:	b4 e0       	ldi	r27, 0x04	; 4
 ddc:	3c d0       	rcall	.+120    	; 0xe56 <__ultoa_invert+0x9c>
 dde:	67 0f       	add	r22, r23
 de0:	78 1f       	adc	r23, r24
 de2:	89 1f       	adc	r24, r25
 de4:	9a 1f       	adc	r25, r26
 de6:	a1 1d       	adc	r26, r1
 de8:	68 0f       	add	r22, r24
 dea:	79 1f       	adc	r23, r25
 dec:	8a 1f       	adc	r24, r26
 dee:	91 1d       	adc	r25, r1
 df0:	a1 1d       	adc	r26, r1
 df2:	6a 0f       	add	r22, r26
 df4:	71 1d       	adc	r23, r1
 df6:	81 1d       	adc	r24, r1
 df8:	91 1d       	adc	r25, r1
 dfa:	a1 1d       	adc	r26, r1
 dfc:	20 d0       	rcall	.+64     	; 0xe3e <__ultoa_invert+0x84>
 dfe:	09 f4       	brne	.+2      	; 0xe02 <__ultoa_invert+0x48>
 e00:	68 94       	set
 e02:	3f 91       	pop	r19
 e04:	2a e0       	ldi	r18, 0x0A	; 10
 e06:	26 9f       	mul	r18, r22
 e08:	11 24       	eor	r1, r1
 e0a:	30 19       	sub	r19, r0
 e0c:	30 5d       	subi	r19, 0xD0	; 208
 e0e:	31 93       	st	Z+, r19
 e10:	de f6       	brtc	.-74     	; 0xdc8 <__ultoa_invert+0xe>
 e12:	cf 01       	movw	r24, r30
 e14:	08 95       	ret
 e16:	46 2f       	mov	r20, r22
 e18:	47 70       	andi	r20, 0x07	; 7
 e1a:	40 5d       	subi	r20, 0xD0	; 208
 e1c:	41 93       	st	Z+, r20
 e1e:	b3 e0       	ldi	r27, 0x03	; 3
 e20:	0f d0       	rcall	.+30     	; 0xe40 <__ultoa_invert+0x86>
 e22:	c9 f7       	brne	.-14     	; 0xe16 <__ultoa_invert+0x5c>
 e24:	f6 cf       	rjmp	.-20     	; 0xe12 <__ultoa_invert+0x58>
 e26:	46 2f       	mov	r20, r22
 e28:	4f 70       	andi	r20, 0x0F	; 15
 e2a:	40 5d       	subi	r20, 0xD0	; 208
 e2c:	4a 33       	cpi	r20, 0x3A	; 58
 e2e:	18 f0       	brcs	.+6      	; 0xe36 <__ultoa_invert+0x7c>
 e30:	49 5d       	subi	r20, 0xD9	; 217
 e32:	31 fd       	sbrc	r19, 1
 e34:	40 52       	subi	r20, 0x20	; 32
 e36:	41 93       	st	Z+, r20
 e38:	02 d0       	rcall	.+4      	; 0xe3e <__ultoa_invert+0x84>
 e3a:	a9 f7       	brne	.-22     	; 0xe26 <__ultoa_invert+0x6c>
 e3c:	ea cf       	rjmp	.-44     	; 0xe12 <__ultoa_invert+0x58>
 e3e:	b4 e0       	ldi	r27, 0x04	; 4
 e40:	a6 95       	lsr	r26
 e42:	97 95       	ror	r25
 e44:	87 95       	ror	r24
 e46:	77 95       	ror	r23
 e48:	67 95       	ror	r22
 e4a:	ba 95       	dec	r27
 e4c:	c9 f7       	brne	.-14     	; 0xe40 <__ultoa_invert+0x86>
 e4e:	00 97       	sbiw	r24, 0x00	; 0
 e50:	61 05       	cpc	r22, r1
 e52:	71 05       	cpc	r23, r1
 e54:	08 95       	ret
 e56:	9b 01       	movw	r18, r22
 e58:	ac 01       	movw	r20, r24
 e5a:	0a 2e       	mov	r0, r26
 e5c:	06 94       	lsr	r0
 e5e:	57 95       	ror	r21
 e60:	47 95       	ror	r20
 e62:	37 95       	ror	r19
 e64:	27 95       	ror	r18
 e66:	ba 95       	dec	r27
 e68:	c9 f7       	brne	.-14     	; 0xe5c <__ultoa_invert+0xa2>
 e6a:	62 0f       	add	r22, r18
 e6c:	73 1f       	adc	r23, r19
 e6e:	84 1f       	adc	r24, r20
 e70:	95 1f       	adc	r25, r21
 e72:	a0 1d       	adc	r26, r0
 e74:	08 95       	ret

00000e76 <__prologue_saves__>:
 e76:	2f 92       	push	r2
 e78:	3f 92       	push	r3
 e7a:	4f 92       	push	r4
 e7c:	5f 92       	push	r5
 e7e:	6f 92       	push	r6
 e80:	7f 92       	push	r7
 e82:	8f 92       	push	r8
 e84:	9f 92       	push	r9
 e86:	af 92       	push	r10
 e88:	bf 92       	push	r11
 e8a:	cf 92       	push	r12
 e8c:	df 92       	push	r13
 e8e:	ef 92       	push	r14
 e90:	ff 92       	push	r15
 e92:	0f 93       	push	r16
 e94:	1f 93       	push	r17
 e96:	cf 93       	push	r28
 e98:	df 93       	push	r29
 e9a:	cd b7       	in	r28, 0x3d	; 61
 e9c:	de b7       	in	r29, 0x3e	; 62
 e9e:	ca 1b       	sub	r28, r26
 ea0:	db 0b       	sbc	r29, r27
 ea2:	0f b6       	in	r0, 0x3f	; 63
 ea4:	f8 94       	cli
 ea6:	de bf       	out	0x3e, r29	; 62
 ea8:	0f be       	out	0x3f, r0	; 63
 eaa:	cd bf       	out	0x3d, r28	; 61
 eac:	09 94       	ijmp

00000eae <__epilogue_restores__>:
 eae:	2a 88       	ldd	r2, Y+18	; 0x12
 eb0:	39 88       	ldd	r3, Y+17	; 0x11
 eb2:	48 88       	ldd	r4, Y+16	; 0x10
 eb4:	5f 84       	ldd	r5, Y+15	; 0x0f
 eb6:	6e 84       	ldd	r6, Y+14	; 0x0e
 eb8:	7d 84       	ldd	r7, Y+13	; 0x0d
 eba:	8c 84       	ldd	r8, Y+12	; 0x0c
 ebc:	9b 84       	ldd	r9, Y+11	; 0x0b
 ebe:	aa 84       	ldd	r10, Y+10	; 0x0a
 ec0:	b9 84       	ldd	r11, Y+9	; 0x09
 ec2:	c8 84       	ldd	r12, Y+8	; 0x08
 ec4:	df 80       	ldd	r13, Y+7	; 0x07
 ec6:	ee 80       	ldd	r14, Y+6	; 0x06
 ec8:	fd 80       	ldd	r15, Y+5	; 0x05
 eca:	0c 81       	ldd	r16, Y+4	; 0x04
 ecc:	1b 81       	ldd	r17, Y+3	; 0x03
 ece:	aa 81       	ldd	r26, Y+2	; 0x02
 ed0:	b9 81       	ldd	r27, Y+1	; 0x01
 ed2:	ce 0f       	add	r28, r30
 ed4:	d1 1d       	adc	r29, r1
 ed6:	0f b6       	in	r0, 0x3f	; 63
 ed8:	f8 94       	cli
 eda:	de bf       	out	0x3e, r29	; 62
 edc:	0f be       	out	0x3f, r0	; 63
 ede:	cd bf       	out	0x3d, r28	; 61
 ee0:	ed 01       	movw	r28, r26
 ee2:	08 95       	ret

00000ee4 <_exit>:
 ee4:	f8 94       	cli

00000ee6 <__stop_program>:
 ee6:	ff cf       	rjmp	.-2      	; 0xee6 <__stop_program>
